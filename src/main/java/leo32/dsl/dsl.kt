package leo32.dsl

import leo32.runtime.Line
import leo32.runtime.line

fun a(vararg xs: Line) = line("a", *xs)
fun above(vararg xs: Line) = line("above", *xs)
fun abs(vararg xs: Line) = line("abs", *xs)
fun absent(vararg xs: Line) = line("absent", *xs)
fun absolute(vararg xs: Line) = line("absolute", *xs)
fun abstract(vararg xs: Line) = line("abstract", *xs)
fun abstraction(vararg xs: Line) = line("abstraction", *xs)
fun accept(vararg xs: Line) = line("accept", *xs)
fun access(vararg xs: Line) = line("access", *xs)
fun accessible(vararg xs: Line) = line("accessible", *xs)
fun acos(vararg xs: Line) = line("acos", *xs)
fun activity(vararg xs: Line) = line("activity", *xs)
fun add(vararg xs: Line) = line("add", *xs)
fun addr(vararg xs: Line) = line("addr", *xs)
fun address(vararg xs: Line) = line("address", *xs)
fun admin(vararg xs: Line) = line("admin", *xs)
fun after(vararg xs: Line) = line("after", *xs)
fun age(vararg xs: Line) = line("age", *xs)
fun all(vararg xs: Line) = line("all", *xs)
fun alloc(vararg xs: Line) = line("alloc", *xs)
fun allocate(vararg xs: Line) = line("allocate", *xs)
fun alpha(vararg xs: Line) = line("alpha", *xs)
fun always(vararg xs: Line) = line("always", *xs)
fun am(vararg xs: Line) = line("am", *xs)
fun amplitude(vararg xs: Line) = line("amplitude", *xs)
fun anchor(vararg xs: Line) = line("anchor", *xs)
fun and(vararg xs: Line) = line("and", *xs)
fun anon(vararg xs: Line) = line("anon", *xs)
fun antialias(vararg xs: Line) = line("antialias", *xs)
fun antialiasing(vararg xs: Line) = line("antialiasing", *xs)
fun any(vararg xs: Line) = line("any", *xs)
fun anything(vararg xs: Line) = line("anything", *xs)
fun appearance(vararg xs: Line) = line("appearance", *xs)
fun append(vararg xs: Line) = line("append", *xs)
fun appending(vararg xs: Line) = line("appending", *xs)
fun application(vararg xs: Line) = line("application", *xs)
fun applicative(vararg xs: Line) = line("applicative", *xs)
fun applier(vararg xs: Line) = line("applier", *xs)
fun apply(vararg xs: Line) = line("apply", *xs)
fun arc(vararg xs: Line) = line("arc", *xs)
fun area(vararg xs: Line) = line("area", *xs)
fun arg(vararg xs: Line) = line("arg", *xs)
fun argb(vararg xs: Line) = line("argb", *xs)
fun args(vararg xs: Line) = line("args", *xs)
fun argument(vararg xs: Line) = line("argument", *xs)
fun arguments(vararg xs: Line) = line("arguments", *xs)
fun arity(vararg xs: Line) = line("arity", *xs)
fun arr(vararg xs: Line) = line("arr", *xs)
fun array(vararg xs: Line) = line("array", *xs)
fun arraycopy(vararg xs: Line) = line("arraycopy", *xs)
fun arrow(vararg xs: Line) = line("arrow", *xs)
fun _as(vararg xs: Line) = line("as", *xs)
fun asin(vararg xs: Line) = line("asin", *xs)
fun assert(vararg xs: Line) = line("assert", *xs)
fun assignable(vararg xs: Line) = line("assignable", *xs)
fun async(vararg xs: Line) = line("async", *xs)
fun at(vararg xs: Line) = line("at", *xs)
fun atan(vararg xs: Line) = line("atan", *xs)
fun attention(vararg xs: Line) = line("attention", *xs)
fun audio(vararg xs: Line) = line("audio", *xs)
fun awt(vararg xs: Line) = line("awt", *xs)
fun b(vararg xs: Line) = line("b", *xs)
fun back(vararg xs: Line) = line("back", *xs)
fun background(vararg xs: Line) = line("background", *xs)
fun backslash(vararg xs: Line) = line("backslash", *xs)
fun backtrace(vararg xs: Line) = line("backtrace", *xs)
fun ball(vararg xs: Line) = line("ball", *xs)
fun ban(vararg xs: Line) = line("ban", *xs)
fun base(vararg xs: Line) = line("base", *xs)
fun becomes(vararg xs: Line) = line("becomes", *xs)
fun before(vararg xs: Line) = line("before", *xs)
fun begin(vararg xs: Line) = line("begin", *xs)
fun being(vararg xs: Line) = line("being", *xs)
fun below(vararg xs: Line) = line("below", *xs)
fun big(vararg xs: Line) = line("big", *xs)
fun binary(vararg xs: Line) = line("binary", *xs)
fun bind(vararg xs: Line) = line("bind", *xs)
fun bindings(vararg xs: Line) = line("bindings", *xs)
fun bit(vararg xs: Line) = line("bit", *xs)
fun black(vararg xs: Line) = line("black", *xs)
fun block(vararg xs: Line) = line("block", *xs)
fun blue(vararg xs: Line) = line("blue", *xs)
fun body(vararg xs: Line) = line("body", *xs)
fun bool(vararg xs: Line) = line("bool", *xs)
fun boolean(vararg xs: Line) = line("boolean", *xs)
fun booleans(vararg xs: Line) = line("booleans", *xs)
fun boost(vararg xs: Line) = line("boost", *xs)
fun bottom(vararg xs: Line) = line("bottom", *xs)
fun bounds(vararg xs: Line) = line("bounds", *xs)
fun box(vararg xs: Line) = line("box", *xs)
fun bpm(vararg xs: Line) = line("bpm", *xs)
fun branch(vararg xs: Line) = line("branch", *xs)
fun buf(vararg xs: Line) = line("buf", *xs)
fun buffer(vararg xs: Line) = line("buffer", *xs)
fun build(vararg xs: Line) = line("build", *xs)
fun builder(vararg xs: Line) = line("builder", *xs)
fun by(vararg xs: Line) = line("by", *xs)
fun byte(vararg xs: Line) = line("byte", *xs)
fun bytes(vararg xs: Line) = line("bytes", *xs)
fun c(vararg xs: Line) = line("c", *xs)
fun cache(vararg xs: Line) = line("cache", *xs)
fun call(vararg xs: Line) = line("call", *xs)
fun called(vararg xs: Line) = line("called", *xs)
fun calling(vararg xs: Line) = line("calling", *xs)
fun cancel(vararg xs: Line) = line("cancel", *xs)
fun cancelable(vararg xs: Line) = line("cancelable", *xs)
fun cancelled(vararg xs: Line) = line("cancelled", *xs)
fun canvas(vararg xs: Line) = line("canvas", *xs)
fun cap(vararg xs: Line) = line("cap", *xs)
fun caps(vararg xs: Line) = line("caps", *xs)
fun case(vararg xs: Line) = line("case", *xs)
fun cast(vararg xs: Line) = line("cast", *xs)
fun catching(vararg xs: Line) = line("catching", *xs)
fun cause(vararg xs: Line) = line("cause", *xs)
fun caution(vararg xs: Line) = line("caution", *xs)
fun center(vararg xs: Line) = line("center", *xs)
fun chain(vararg xs: Line) = line("chain", *xs)
fun change(vararg xs: Line) = line("change", *xs)
fun char(vararg xs: Line) = line("char", *xs)
fun character(vararg xs: Line) = line("character", *xs)
fun cheat(vararg xs: Line) = line("cheat", *xs)
fun check(vararg xs: Line) = line("check", *xs)
fun checked(vararg xs: Line) = line("checked", *xs)
fun child(vararg xs: Line) = line("child", *xs)
fun children(vararg xs: Line) = line("children", *xs)
fun circle(vararg xs: Line) = line("circle", *xs)
fun _class(vararg xs: Line) = line("class", *xs)
fun classes(vararg xs: Line) = line("classes", *xs)
fun clear(vararg xs: Line) = line("clear", *xs)
fun click(vararg xs: Line) = line("click", *xs)
fun clip(vararg xs: Line) = line("clip", *xs)
fun clock(vararg xs: Line) = line("clock", *xs)
fun clone(vararg xs: Line) = line("clone", *xs)
fun clones(vararg xs: Line) = line("clones", *xs)
fun close(vararg xs: Line) = line("close", *xs)
fun closeable(vararg xs: Line) = line("closeable", *xs)
fun closed(vararg xs: Line) = line("closed", *xs)
fun closure(vararg xs: Line) = line("closure", *xs)
fun code(vararg xs: Line) = line("code", *xs)
fun codeblock(vararg xs: Line) = line("codeblock", *xs)
fun codegen(vararg xs: Line) = line("codegen", *xs)
fun collect(vararg xs: Line) = line("collect", *xs)
fun collecting(vararg xs: Line) = line("collecting", *xs)
fun color(vararg xs: Line) = line("color", *xs)
fun colors(vararg xs: Line) = line("colors", *xs)
fun column(vararg xs: Line) = line("column", *xs)
fun columns(vararg xs: Line) = line("columns", *xs)
fun com(vararg xs: Line) = line("com", *xs)
fun comfort(vararg xs: Line) = line("comfort", *xs)
fun comma(vararg xs: Line) = line("comma", *xs)
fun command(vararg xs: Line) = line("command", *xs)
fun comment(vararg xs: Line) = line("comment", *xs)
fun common(vararg xs: Line) = line("common", *xs)
fun compact(vararg xs: Line) = line("compact", *xs)
fun compare(vararg xs: Line) = line("compare", *xs)
fun compass(vararg xs: Line) = line("compass", *xs)
fun component(vararg xs: Line) = line("component", *xs)
fun components(vararg xs: Line) = line("components", *xs)
fun compute(vararg xs: Line) = line("compute", *xs)
fun concat(vararg xs: Line) = line("concat", *xs)
fun condition(vararg xs: Line) = line("condition", *xs)
fun conflicts(vararg xs: Line) = line("conflicts", *xs)
fun connect(vararg xs: Line) = line("connect", *xs)
fun connected(vararg xs: Line) = line("connected", *xs)
fun connection(vararg xs: Line) = line("connection", *xs)
fun connections(vararg xs: Line) = line("connections", *xs)
fun console(vararg xs: Line) = line("console", *xs)
fun const(vararg xs: Line) = line("const", *xs)
fun constant(vararg xs: Line) = line("constant", *xs)
fun constructor(vararg xs: Line) = line("constructor", *xs)
fun constructors(vararg xs: Line) = line("constructors", *xs)
fun constructs(vararg xs: Line) = line("constructs", *xs)
fun constuctor(vararg xs: Line) = line("constuctor", *xs)
fun consumer(vararg xs: Line) = line("consumer", *xs)
fun consumers(vararg xs: Line) = line("consumers", *xs)
fun contain(vararg xs: Line) = line("contain", *xs)
fun contains(vararg xs: Line) = line("contains", *xs)
fun content(vararg xs: Line) = line("content", *xs)
fun context(vararg xs: Line) = line("context", *xs)
fun continuous(vararg xs: Line) = line("continuous", *xs)
fun control(vararg xs: Line) = line("control", *xs)
fun convert(vararg xs: Line) = line("convert", *xs)
fun coord(vararg xs: Line) = line("coord", *xs)
fun coordinate(vararg xs: Line) = line("coordinate", *xs)
fun coordinates(vararg xs: Line) = line("coordinates", *xs)
fun coords(vararg xs: Line) = line("coords", *xs)
fun copies(vararg xs: Line) = line("copies", *xs)
fun copy(vararg xs: Line) = line("copy", *xs)
fun cos(vararg xs: Line) = line("cos", *xs)
fun cosh(vararg xs: Line) = line("cosh", *xs)
fun count(vararg xs: Line) = line("count", *xs)
fun counter(vararg xs: Line) = line("counter", *xs)
fun cout(vararg xs: Line) = line("cout", *xs)
fun cover(vararg xs: Line) = line("cover", *xs)
fun crash(vararg xs: Line) = line("crash", *xs)
fun create(vararg xs: Line) = line("create", *xs)
fun created(vararg xs: Line) = line("created", *xs)
fun ctor(vararg xs: Line) = line("ctor", *xs)
fun current(vararg xs: Line) = line("current", *xs)
fun curve(vararg xs: Line) = line("curve", *xs)
fun cut(vararg xs: Line) = line("cut", *xs)
fun cyan(vararg xs: Line) = line("cyan", *xs)
fun d(vararg xs: Line) = line("d", *xs)
fun dare(vararg xs: Line) = line("dare", *xs)
fun dark(vararg xs: Line) = line("dark", *xs)
fun data(vararg xs: Line) = line("data", *xs)
fun database(vararg xs: Line) = line("database", *xs)
fun day(vararg xs: Line) = line("day", *xs)
fun debug(vararg xs: Line) = line("debug", *xs)
fun declaration(vararg xs: Line) = line("declaration", *xs)
fun declared(vararg xs: Line) = line("declared", *xs)
fun declaring(vararg xs: Line) = line("declaring", *xs)
fun deepnight(vararg xs: Line) = line("deepnight", *xs)
fun def(vararg xs: Line) = line("def", *xs)
fun default(vararg xs: Line) = line("default", *xs)
fun define(vararg xs: Line) = line("define", *xs)
fun delete(vararg xs: Line) = line("delete", *xs)
fun demo(vararg xs: Line) = line("demo", *xs)
fun depth(vararg xs: Line) = line("depth", *xs)
fun derive(vararg xs: Line) = line("derive", *xs)
fun destroy(vararg xs: Line) = line("destroy", *xs)
fun detector(vararg xs: Line) = line("detector", *xs)
fun dict(vararg xs: Line) = line("dict", *xs)
fun dictionary(vararg xs: Line) = line("dictionary", *xs)
fun did(vararg xs: Line) = line("did", *xs)
fun difference(vararg xs: Line) = line("difference", *xs)
fun digest(vararg xs: Line) = line("digest", *xs)
fun dimensions(vararg xs: Line) = line("dimensions", *xs)
fun direct(vararg xs: Line) = line("direct", *xs)
fun display(vararg xs: Line) = line("display", *xs)
fun div(vararg xs: Line) = line("div", *xs)
fun divide(vararg xs: Line) = line("divide", *xs)
fun divided(vararg xs: Line) = line("divided", *xs)
fun divmod(vararg xs: Line) = line("divmod", *xs)
fun _do(vararg xs: Line) = line("do", *xs)
fun document(vararg xs: Line) = line("document", *xs)
fun done(vararg xs: Line) = line("done", *xs)
fun dot(vararg xs: Line) = line("dot", *xs)
fun double(vararg xs: Line) = line("double", *xs)
fun dp(vararg xs: Line) = line("dp", *xs)
fun draw(vararg xs: Line) = line("draw", *xs)
fun drawing(vararg xs: Line) = line("drawing", *xs)
fun ds(vararg xs: Line) = line("ds", *xs)
fun duty(vararg xs: Line) = line("duty", *xs)
fun dynamic(vararg xs: Line) = line("dynamic", *xs)
fun dynamics(vararg xs: Line) = line("dynamics", *xs)
fun e(vararg xs: Line) = line("e", *xs)
fun each(vararg xs: Line) = line("each", *xs)
fun edge(vararg xs: Line) = line("edge", *xs)
fun eight(vararg xs: Line) = line("eight", *xs)
fun either(vararg xs: Line) = line("either", *xs)
fun element(vararg xs: Line) = line("element", *xs)
fun elements(vararg xs: Line) = line("elements", *xs)
fun _else(vararg xs: Line) = line("else", *xs)
fun email(vararg xs: Line) = line("email", *xs)
fun empty(vararg xs: Line) = line("empty", *xs)
fun end(vararg xs: Line) = line("end", *xs)
fun ends(vararg xs: Line) = line("ends", *xs)
fun enter(vararg xs: Line) = line("enter", *xs)
fun entries(vararg xs: Line) = line("entries", *xs)
fun entry(vararg xs: Line) = line("entry", *xs)
fun enum(vararg xs: Line) = line("enum", *xs)
fun enums(vararg xs: Line) = line("enums", *xs)
fun eq(vararg xs: Line) = line("eq", *xs)
fun equal(vararg xs: Line) = line("equal", *xs)
fun equals(vararg xs: Line) = line("equals", *xs)
fun equatable(vararg xs: Line) = line("equatable", *xs)
fun error(vararg xs: Line) = line("error", *xs)
fun esc(vararg xs: Line) = line("esc", *xs)
fun escape(vararg xs: Line) = line("escape", *xs)
fun eval(vararg xs: Line) = line("eval", *xs)
fun evaluate(vararg xs: Line) = line("evaluate", *xs)
fun evaluated(vararg xs: Line) = line("evaluated", *xs)
fun event(vararg xs: Line) = line("event", *xs)
fun events(vararg xs: Line) = line("events", *xs)
fun exactly(vararg xs: Line) = line("exactly", *xs)
fun examples(vararg xs: Line) = line("examples", *xs)
fun exception(vararg xs: Line) = line("exception", *xs)
fun exceptions(vararg xs: Line) = line("exceptions", *xs)
fun exclusive(vararg xs: Line) = line("exclusive", *xs)
fun exec(vararg xs: Line) = line("exec", *xs)
fun executable(vararg xs: Line) = line("executable", *xs)
fun execute(vararg xs: Line) = line("execute", *xs)
fun execution(vararg xs: Line) = line("execution", *xs)
fun executor(vararg xs: Line) = line("executor", *xs)
fun exists(vararg xs: Line) = line("exists", *xs)
fun exit(vararg xs: Line) = line("exit", *xs)
fun expr(vararg xs: Line) = line("expr", *xs)
fun expression(vararg xs: Line) = line("expression", *xs)
fun ext(vararg xs: Line) = line("ext", *xs)
fun extends(vararg xs: Line) = line("extends", *xs)
fun extractor(vararg xs: Line) = line("extractor", *xs)
fun f(vararg xs: Line) = line("f", *xs)
fun factory(vararg xs: Line) = line("factory", *xs)
fun fading(vararg xs: Line) = line("fading", *xs)
fun failed(vararg xs: Line) = line("failed", *xs)
fun failures(vararg xs: Line) = line("failures", *xs)
fun _false(vararg xs: Line) = line("false", *xs)
fun family(vararg xs: Line) = line("family", *xs)
fun fast(vararg xs: Line) = line("fast", *xs)
fun father(vararg xs: Line) = line("father", *xs)
fun female(vararg xs: Line) = line("female", *xs)
fun fetch(vararg xs: Line) = line("fetch", *xs)
fun fib(vararg xs: Line) = line("fib", *xs)
fun field(vararg xs: Line) = line("field", *xs)
fun fields(vararg xs: Line) = line("fields", *xs)
fun file(vararg xs: Line) = line("file", *xs)
fun files(vararg xs: Line) = line("files", *xs)
fun fill(vararg xs: Line) = line("fill", *xs)
fun filter(vararg xs: Line) = line("filter", *xs)
fun final(vararg xs: Line) = line("final", *xs)
fun finality(vararg xs: Line) = line("finality", *xs)
fun finalizer(vararg xs: Line) = line("finalizer", *xs)
fun find(vararg xs: Line) = line("find", *xs)
fun finite(vararg xs: Line) = line("finite", *xs)
fun first(vararg xs: Line) = line("first", *xs)
fun five(vararg xs: Line) = line("five", *xs)
fun flat(vararg xs: Line) = line("flat", *xs)
fun flip(vararg xs: Line) = line("flip", *xs)
fun float(vararg xs: Line) = line("float", *xs)
fun float32(vararg xs: Line) = line("float32", *xs)
fun float64(vararg xs: Line) = line("float64", *xs)
fun floating(vararg xs: Line) = line("floating", *xs)
fun flush(vararg xs: Line) = line("flush", *xs)
fun fn(vararg xs: Line) = line("fn", *xs)
fun fold(vararg xs: Line) = line("fold", *xs)
fun folder(vararg xs: Line) = line("folder", *xs)
fun font(vararg xs: Line) = line("font", *xs)
fun footer(vararg xs: Line) = line("footer", *xs)
fun _for(vararg xs: Line) = line("for", *xs)
fun foreground(vararg xs: Line) = line("foreground", *xs)
fun forget(vararg xs: Line) = line("forget", *xs)
fun form(vararg xs: Line) = line("form", *xs)
fun found(vararg xs: Line) = line("found", *xs)
fun four(vararg xs: Line) = line("four", *xs)
fun fragment(vararg xs: Line) = line("fragment", *xs)
fun frame(vararg xs: Line) = line("frame", *xs)
fun free(vararg xs: Line) = line("free", *xs)
fun freeze(vararg xs: Line) = line("freeze", *xs)
fun frequency(vararg xs: Line) = line("frequency", *xs)
fun from(vararg xs: Line) = line("from", *xs)
fun frozen(vararg xs: Line) = line("frozen", *xs)
fun full(vararg xs: Line) = line("full", *xs)
fun fully(vararg xs: Line) = line("fully", *xs)
fun _fun(vararg xs: Line) = line("fun", *xs)
fun function(vararg xs: Line) = line("function", *xs)
fun functions(vararg xs: Line) = line("functions", *xs)
fun functor(vararg xs: Line) = line("functor", *xs)
fun future(vararg xs: Line) = line("future", *xs)
fun futures(vararg xs: Line) = line("futures", *xs)
fun g(vararg xs: Line) = line("g", *xs)
fun game(vararg xs: Line) = line("game", *xs)
fun gen(vararg xs: Line) = line("gen", *xs)
fun generic(vararg xs: Line) = line("generic", *xs)
fun generics(vararg xs: Line) = line("generics", *xs)
fun get(vararg xs: Line) = line("get", *xs)
fun gets(vararg xs: Line) = line("gets", *xs)
fun getting(vararg xs: Line) = line("getting", *xs)
fun give(vararg xs: Line) = line("give", *xs)
fun gives(vararg xs: Line) = line("gives", *xs)
fun global(vararg xs: Line) = line("global", *xs)
fun glyph(vararg xs: Line) = line("glyph", *xs)
fun google(vararg xs: Line) = line("google", *xs)
fun gray(vararg xs: Line) = line("gray", *xs)
fun green(vararg xs: Line) = line("green", *xs)
fun grey(vararg xs: Line) = line("grey", *xs)
fun grid(vararg xs: Line) = line("grid", *xs)
fun h(vararg xs: Line) = line("h", *xs)
fun hack(vararg xs: Line) = line("hack", *xs)
fun hacker(vararg xs: Line) = line("hacker", *xs)
fun handle(vararg xs: Line) = line("handle", *xs)
fun has(vararg xs: Line) = line("has", *xs)
fun hash(vararg xs: Line) = line("hash", *xs)
fun hashes(vararg xs: Line) = line("hashes", *xs)
fun haxe(vararg xs: Line) = line("haxe", *xs)
fun head(vararg xs: Line) = line("head", *xs)
fun header(vararg xs: Line) = line("header", *xs)
fun heap(vararg xs: Line) = line("heap", *xs)
fun height(vararg xs: Line) = line("height", *xs)
fun heights(vararg xs: Line) = line("heights", *xs)
fun hi(vararg xs: Line) = line("hi", *xs)
fun high(vararg xs: Line) = line("high", *xs)
fun hint(vararg xs: Line) = line("hint", *xs)
fun holder(vararg xs: Line) = line("holder", *xs)
fun horizontal(vararg xs: Line) = line("horizontal", *xs)
fun horizontally(vararg xs: Line) = line("horizontally", *xs)
fun host(vararg xs: Line) = line("host", *xs)
fun hour(vararg xs: Line) = line("hour", *xs)
fun html(vararg xs: Line) = line("html", *xs)
fun http(vararg xs: Line) = line("http", *xs)
fun husband(vararg xs: Line) = line("husband", *xs)
fun hx(vararg xs: Line) = line("hx", *xs)
fun i(vararg xs: Line) = line("i", *xs)
fun identifier(vararg xs: Line) = line("identifier", *xs)
fun identifiers(vararg xs: Line) = line("identifiers", *xs)
fun _if(vararg xs: Line) = line("if", *xs)
fun immediate(vararg xs: Line) = line("immediate", *xs)
fun immutable(vararg xs: Line) = line("immutable", *xs)
fun impl(vararg xs: Line) = line("impl", *xs)
fun implement(vararg xs: Line) = line("implement", *xs)
fun implements(vararg xs: Line) = line("implements", *xs)
fun import(vararg xs: Line) = line("import", *xs)
fun _in(vararg xs: Line) = line("in", *xs)
fun inbpm(vararg xs: Line) = line("inbpm", *xs)
fun indent(vararg xs: Line) = line("indent", *xs)
fun index(vararg xs: Line) = line("index", *xs)
fun infinite(vararg xs: Line) = line("infinite", *xs)
fun info(vararg xs: Line) = line("info", *xs)
fun inherit(vararg xs: Line) = line("inherit", *xs)
fun init(vararg xs: Line) = line("init", *xs)
fun initial(vararg xs: Line) = line("initial", *xs)
fun initializer(vararg xs: Line) = line("initializer", *xs)
fun inline(vararg xs: Line) = line("inline", *xs)
fun input(vararg xs: Line) = line("input", *xs)
fun insert(vararg xs: Line) = line("insert", *xs)
fun instance(vararg xs: Line) = line("instance", *xs)
fun instrument(vararg xs: Line) = line("instrument", *xs)
fun instruments(vararg xs: Line) = line("instruments", *xs)
fun int(vararg xs: Line) = line("int", *xs)
fun int16(vararg xs: Line) = line("int16", *xs)
fun int32(vararg xs: Line) = line("int32", *xs)
fun int64(vararg xs: Line) = line("int64", *xs)
fun int8(vararg xs: Line) = line("int8", *xs)
fun integer(vararg xs: Line) = line("integer", *xs)
fun integers(vararg xs: Line) = line("integers", *xs)
fun integral(vararg xs: Line) = line("integral", *xs)
fun intent(vararg xs: Line) = line("intent", *xs)
fun intercept(vararg xs: Line) = line("intercept", *xs)
fun _interface(vararg xs: Line) = line("interface", *xs)
fun intern(vararg xs: Line) = line("intern", *xs)
fun interrupt(vararg xs: Line) = line("interrupt", *xs)
fun inventory(vararg xs: Line) = line("inventory", *xs)
fun invoke(vararg xs: Line) = line("invoke", *xs)
fun ios(vararg xs: Line) = line("ios", *xs)
fun ipad(vararg xs: Line) = line("ipad", *xs)
fun iphone(vararg xs: Line) = line("iphone", *xs)
fun _is(vararg xs: Line) = line("is", *xs)
fun it(vararg xs: Line) = line("it", *xs)
fun iterable(vararg xs: Line) = line("iterable", *xs)
fun iterables(vararg xs: Line) = line("iterables", *xs)
fun iteratively(vararg xs: Line) = line("iteratively", *xs)
fun iterator(vararg xs: Line) = line("iterator", *xs)
fun iterators(vararg xs: Line) = line("iterators", *xs)
fun itself(vararg xs: Line) = line("itself", *xs)
fun j(vararg xs: Line) = line("j", *xs)
fun jam(vararg xs: Line) = line("jam", *xs)
fun jar(vararg xs: Line) = line("jar", *xs)
fun java(vararg xs: Line) = line("java", *xs)
fun join(vararg xs: Line) = line("join", *xs)
fun jump(vararg xs: Line) = line("jump", *xs)
fun just(vararg xs: Line) = line("just", *xs)
fun k(vararg xs: Line) = line("k", *xs)
fun key(vararg xs: Line) = line("key", *xs)
fun keyboard(vararg xs: Line) = line("keyboard", *xs)
fun keyword(vararg xs: Line) = line("keyword", *xs)
fun kick(vararg xs: Line) = line("kick", *xs)
fun kotlin(vararg xs: Line) = line("kotlin", *xs)
fun l(vararg xs: Line) = line("l", *xs)
fun label(vararg xs: Line) = line("label", *xs)
fun lambda(vararg xs: Line) = line("lambda", *xs)
fun lang(vararg xs: Line) = line("lang", *xs)
fun last(vararg xs: Line) = line("last", *xs)
fun latch(vararg xs: Line) = line("latch", *xs)
fun left(vararg xs: Line) = line("left", *xs)
fun len(vararg xs: Line) = line("len", *xs)
fun length(vararg xs: Line) = line("length", *xs)
fun lengths(vararg xs: Line) = line("lengths", *xs)
fun leo(vararg xs: Line) = line("leo", *xs)
fun leonize(vararg xs: Line) = line("leonize", *xs)
fun leonized(vararg xs: Line) = line("leonized", *xs)
fun leonizer(vararg xs: Line) = line("leonizer", *xs)
fun lhs(vararg xs: Line) = line("lhs", *xs)
fun lib(vararg xs: Line) = line("lib", *xs)
fun library(vararg xs: Line) = line("library", *xs)
fun light(vararg xs: Line) = line("light", *xs)
fun line(vararg xs: Line) = line("line", *xs)
fun linked(vararg xs: Line) = line("linked", *xs)
fun list(vararg xs: Line) = line("list", *xs)
fun listener(vararg xs: Line) = line("listener", *xs)
fun lists(vararg xs: Line) = line("lists", *xs)
fun literal(vararg xs: Line) = line("literal", *xs)
fun lo(vararg xs: Line) = line("lo", *xs)
fun load(vararg xs: Line) = line("load", *xs)
fun loader(vararg xs: Line) = line("loader", *xs)
fun lock(vararg xs: Line) = line("lock", *xs)
fun log(vararg xs: Line) = line("log", *xs)
fun login(vararg xs: Line) = line("login", *xs)
fun logout(vararg xs: Line) = line("logout", *xs)
fun lol(vararg xs: Line) = line("lol", *xs)
fun long(vararg xs: Line) = line("long", *xs)
fun look(vararg xs: Line) = line("look", *xs)
fun lookup(vararg xs: Line) = line("lookup", *xs)
fun loop(vararg xs: Line) = line("loop", *xs)
fun lost(vararg xs: Line) = line("lost", *xs)
fun low(vararg xs: Line) = line("low", *xs)
fun lower(vararg xs: Line) = line("lower", *xs)
fun ludum(vararg xs: Line) = line("ludum", *xs)
fun ludumdare(vararg xs: Line) = line("ludumdare", *xs)
fun m(vararg xs: Line) = line("m", *xs)
fun mac(vararg xs: Line) = line("mac", *xs)
fun macos(vararg xs: Line) = line("macos", *xs)
fun magenta(vararg xs: Line) = line("magenta", *xs)
fun mail(vararg xs: Line) = line("mail", *xs)
fun main(vararg xs: Line) = line("main", *xs)
fun make(vararg xs: Line) = line("make", *xs)
fun male(vararg xs: Line) = line("male", *xs)
fun manager(vararg xs: Line) = line("manager", *xs)
fun map(vararg xs: Line) = line("map", *xs)
fun mapping(vararg xs: Line) = line("mapping", *xs)
fun maps(vararg xs: Line) = line("maps", *xs)
fun mapt(vararg xs: Line) = line("mapt", *xs)
fun margin(vararg xs: Line) = line("margin", *xs)
fun marriage(vararg xs: Line) = line("marriage", *xs)
fun match(vararg xs: Line) = line("match", *xs)
fun matcher(vararg xs: Line) = line("matcher", *xs)
fun matches(vararg xs: Line) = line("matches", *xs)
fun matching(vararg xs: Line) = line("matching", *xs)
fun max(vararg xs: Line) = line("max", *xs)
fun maybe(vararg xs: Line) = line("maybe", *xs)
fun measure(vararg xs: Line) = line("measure", *xs)
fun melody(vararg xs: Line) = line("melody", *xs)
fun mem(vararg xs: Line) = line("mem", *xs)
fun member(vararg xs: Line) = line("member", *xs)
fun members(vararg xs: Line) = line("members", *xs)
fun membership(vararg xs: Line) = line("membership", *xs)
fun memory(vararg xs: Line) = line("memory", *xs)
fun merger(vararg xs: Line) = line("merger", *xs)
fun message(vararg xs: Line) = line("message", *xs)
fun meta(vararg xs: Line) = line("meta", *xs)
fun method(vararg xs: Line) = line("method", *xs)
fun methods(vararg xs: Line) = line("methods", *xs)
fun metrics(vararg xs: Line) = line("metrics", *xs)
fun micapolos(vararg xs: Line) = line("micapolos", *xs)
fun middle(vararg xs: Line) = line("middle", *xs)
fun millis(vararg xs: Line) = line("millis", *xs)
fun min(vararg xs: Line) = line("min", *xs)
fun minus(vararg xs: Line) = line("minus", *xs)
fun minute(vararg xs: Line) = line("minute", *xs)
fun mod(vararg xs: Line) = line("mod", *xs)
fun mode(vararg xs: Line) = line("mode", *xs)
fun modifier(vararg xs: Line) = line("modifier", *xs)
fun modifiers(vararg xs: Line) = line("modifiers", *xs)
fun module(vararg xs: Line) = line("module", *xs)
fun monad(vararg xs: Line) = line("monad", *xs)
fun month(vararg xs: Line) = line("month", *xs)
fun more(vararg xs: Line) = line("more", *xs)
fun mother(vararg xs: Line) = line("mother", *xs)
fun motion(vararg xs: Line) = line("motion", *xs)
fun mouse(vararg xs: Line) = line("mouse", *xs)
fun mul(vararg xs: Line) = line("mul", *xs)
fun multiply(vararg xs: Line) = line("multiply", *xs)
fun mutable(vararg xs: Line) = line("mutable", *xs)
fun my(vararg xs: Line) = line("my", *xs)
fun n(vararg xs: Line) = line("n", *xs)
fun name(vararg xs: Line) = line("name", *xs)
fun named(vararg xs: Line) = line("named", *xs)
fun names(vararg xs: Line) = line("names", *xs)
fun nand(vararg xs: Line) = line("nand", *xs)
fun native(vararg xs: Line) = line("native", *xs)
fun negate(vararg xs: Line) = line("negate", *xs)
fun new(vararg xs: Line) = line("new", *xs)
fun newline(vararg xs: Line) = line("newline", *xs)
fun next(vararg xs: Line) = line("next", *xs)
fun night(vararg xs: Line) = line("night", *xs)
fun nil(vararg xs: Line) = line("nil", *xs)
fun nine(vararg xs: Line) = line("nine", *xs)
fun no(vararg xs: Line) = line("no", *xs)
fun node(vararg xs: Line) = line("node", *xs)
fun non(vararg xs: Line) = line("non", *xs)
fun none(vararg xs: Line) = line("none", *xs)
fun nor(vararg xs: Line) = line("nor", *xs)
fun not(vararg xs: Line) = line("not", *xs)
fun note(vararg xs: Line) = line("note", *xs)
fun notes(vararg xs: Line) = line("notes", *xs)
fun nothing(vararg xs: Line) = line("nothing", *xs)
fun now(vararg xs: Line) = line("now", *xs)
fun _null(vararg xs: Line) = line("null", *xs)
fun nullable(vararg xs: Line) = line("nullable", *xs)
fun number(vararg xs: Line) = line("number", *xs)
fun o(vararg xs: Line) = line("o", *xs)
fun obj(vararg xs: Line) = line("obj", *xs)
fun _object(vararg xs: Line) = line("object", *xs)
fun objects(vararg xs: Line) = line("objects", *xs)
fun of(vararg xs: Line) = line("of", *xs)
fun off(vararg xs: Line) = line("off", *xs)
fun office(vararg xs: Line) = line("office", *xs)
fun offset(vararg xs: Line) = line("offset", *xs)
fun ofib(vararg xs: Line) = line("ofib", *xs)
fun on(vararg xs: Line) = line("on", *xs)
fun one(vararg xs: Line) = line("one", *xs)
fun only(vararg xs: Line) = line("only", *xs)
fun op(vararg xs: Line) = line("op", *xs)
fun open(vararg xs: Line) = line("open", *xs)
fun operation(vararg xs: Line) = line("operation", *xs)
fun operator(vararg xs: Line) = line("operator", *xs)
fun option(vararg xs: Line) = line("option", *xs)
fun optional(vararg xs: Line) = line("optional", *xs)
fun optionals(vararg xs: Line) = line("optionals", *xs)
fun or(vararg xs: Line) = line("or", *xs)
fun orange(vararg xs: Line) = line("orange", *xs)
fun order(vararg xs: Line) = line("order", *xs)
fun ordinal(vararg xs: Line) = line("ordinal", *xs)
fun org(vararg xs: Line) = line("org", *xs)
fun original(vararg xs: Line) = line("original", *xs)
fun otherwise(vararg xs: Line) = line("otherwise", *xs)
fun out(vararg xs: Line) = line("out", *xs)
fun outline(vararg xs: Line) = line("outline", *xs)
fun output(vararg xs: Line) = line("output", *xs)
fun oval(vararg xs: Line) = line("oval", *xs)
fun over(vararg xs: Line) = line("over", *xs)
fun owner(vararg xs: Line) = line("owner", *xs)
fun p(vararg xs: Line) = line("p", *xs)
fun _package(vararg xs: Line) = line("package", *xs)
fun packages(vararg xs: Line) = line("packages", *xs)
fun page(vararg xs: Line) = line("page", *xs)
fun paint(vararg xs: Line) = line("paint", *xs)
fun pair(vararg xs: Line) = line("pair", *xs)
fun pane(vararg xs: Line) = line("pane", *xs)
fun param(vararg xs: Line) = line("param", *xs)
fun parameter(vararg xs: Line) = line("parameter", *xs)
fun parameters(vararg xs: Line) = line("parameters", *xs)
fun params(vararg xs: Line) = line("params", *xs)
fun parent(vararg xs: Line) = line("parent", *xs)
fun parentheses(vararg xs: Line) = line("parentheses", *xs)
fun parse(vararg xs: Line) = line("parse", *xs)
fun parser(vararg xs: Line) = line("parser", *xs)
fun pass(vararg xs: Line) = line("pass", *xs)
fun password(vararg xs: Line) = line("password", *xs)
fun paste(vararg xs: Line) = line("paste", *xs)
fun path(vararg xs: Line) = line("path", *xs)
fun pattern(vararg xs: Line) = line("pattern", *xs)
fun pause(vararg xs: Line) = line("pause", *xs)
fun payload(vararg xs: Line) = line("payload", *xs)
fun pc(vararg xs: Line) = line("pc", *xs)
fun period(vararg xs: Line) = line("period", *xs)
fun person(vararg xs: Line) = line("person", *xs)
fun phase(vararg xs: Line) = line("phase", *xs)
fun phone(vararg xs: Line) = line("phone", *xs)
fun pi(vararg xs: Line) = line("pi", *xs)
fun pin(vararg xs: Line) = line("pin", *xs)
fun pink(vararg xs: Line) = line("pink", *xs)
fun pins(vararg xs: Line) = line("pins", *xs)
fun pixel(vararg xs: Line) = line("pixel", *xs)
fun pkg(vararg xs: Line) = line("pkg", *xs)
fun plain(vararg xs: Line) = line("plain", *xs)
fun play(vararg xs: Line) = line("play", *xs)
fun plus(vararg xs: Line) = line("plus", *xs)
fun pm(vararg xs: Line) = line("pm", *xs)
fun point(vararg xs: Line) = line("point", *xs)
fun pop(vararg xs: Line) = line("pop", *xs)
fun port(vararg xs: Line) = line("port", *xs)
fun position(vararg xs: Line) = line("position", *xs)
fun possible(vararg xs: Line) = line("possible", *xs)
fun post(vararg xs: Line) = line("post", *xs)
fun ppq(vararg xs: Line) = line("ppq", *xs)
fun predecessor(vararg xs: Line) = line("predecessor", *xs)
fun prefix(vararg xs: Line) = line("prefix", *xs)
fun preprocess(vararg xs: Line) = line("preprocess", *xs)
fun preprocessor(vararg xs: Line) = line("preprocessor", *xs)
fun present(vararg xs: Line) = line("present", *xs)
fun prev(vararg xs: Line) = line("prev", *xs)
fun previous(vararg xs: Line) = line("previous", *xs)
fun primitive(vararg xs: Line) = line("primitive", *xs)
fun print(vararg xs: Line) = line("print", *xs)
fun printer(vararg xs: Line) = line("printer", *xs)
fun printing(vararg xs: Line) = line("printing", *xs)
fun println(vararg xs: Line) = line("println", *xs)
fun private(vararg xs: Line) = line("private", *xs)
fun process(vararg xs: Line) = line("process", *xs)
fun processed(vararg xs: Line) = line("processed", *xs)
fun producer(vararg xs: Line) = line("producer", *xs)
fun product(vararg xs: Line) = line("product", *xs)
fun program(vararg xs: Line) = line("program", *xs)
fun property(vararg xs: Line) = line("property", *xs)
fun protected(vararg xs: Line) = line("protected", *xs)
fun public(vararg xs: Line) = line("public", *xs)
fun pull(vararg xs: Line) = line("pull", *xs)
fun push(vararg xs: Line) = line("push", *xs)
fun put(vararg xs: Line) = line("put", *xs)
fun q(vararg xs: Line) = line("q", *xs)
fun query(vararg xs: Line) = line("query", *xs)
fun queue(vararg xs: Line) = line("queue", *xs)
fun quicksort(vararg xs: Line) = line("quicksort", *xs)
fun quote(vararg xs: Line) = line("quote", *xs)
fun quoted(vararg xs: Line) = line("quoted", *xs)
fun r(vararg xs: Line) = line("r", *xs)
fun radius(vararg xs: Line) = line("radius", *xs)
fun random(vararg xs: Line) = line("random", *xs)
fun read(vararg xs: Line) = line("read", *xs)
fun reader(vararg xs: Line) = line("reader", *xs)
fun reading(vararg xs: Line) = line("reading", *xs)
fun readonly(vararg xs: Line) = line("readonly", *xs)
fun readutf(vararg xs: Line) = line("readutf", *xs)
fun recover(vararg xs: Line) = line("recover", *xs)
fun rect(vararg xs: Line) = line("rect", *xs)
fun rectangle(vararg xs: Line) = line("rectangle", *xs)
fun recursively(vararg xs: Line) = line("recursively", *xs)
fun red(vararg xs: Line) = line("red", *xs)
fun redirect(vararg xs: Line) = line("redirect", *xs)
fun ref(vararg xs: Line) = line("ref", *xs)
fun reference(vararg xs: Line) = line("reference", *xs)
fun refl(vararg xs: Line) = line("refl", *xs)
fun reflect(vararg xs: Line) = line("reflect", *xs)
fun remainder(vararg xs: Line) = line("remainder", *xs)
fun remove(vararg xs: Line) = line("remove", *xs)
fun render(vararg xs: Line) = line("render", *xs)
fun rendering(vararg xs: Line) = line("rendering", *xs)
fun repeat(vararg xs: Line) = line("repeat", *xs)
fun replace(vararg xs: Line) = line("replace", *xs)
fun required(vararg xs: Line) = line("required", *xs)
fun reset(vararg xs: Line) = line("reset", *xs)
fun resolution(vararg xs: Line) = line("resolution", *xs)
fun resolve(vararg xs: Line) = line("resolve", *xs)
fun resolved(vararg xs: Line) = line("resolved", *xs)
fun resolver(vararg xs: Line) = line("resolver", *xs)
fun resource(vararg xs: Line) = line("resource", *xs)
fun result(vararg xs: Line) = line("result", *xs)
fun resume(vararg xs: Line) = line("resume", *xs)
fun resumed(vararg xs: Line) = line("resumed", *xs)
fun ret(vararg xs: Line) = line("ret", *xs)
fun reti(vararg xs: Line) = line("reti", *xs)
fun _return(vararg xs: Line) = line("return", *xs)
fun returns(vararg xs: Line) = line("returns", *xs)
fun reverse(vararg xs: Line) = line("reverse", *xs)
fun rgb(vararg xs: Line) = line("rgb", *xs)
fun rgba(vararg xs: Line) = line("rgba", *xs)
fun rhs(vararg xs: Line) = line("rhs", *xs)
fun right(vararg xs: Line) = line("right", *xs)
fun root(vararg xs: Line) = line("root", *xs)
fun round(vararg xs: Line) = line("round", *xs)
fun row(vararg xs: Line) = line("row", *xs)
fun rows(vararg xs: Line) = line("rows", *xs)
fun rule(vararg xs: Line) = line("rule", *xs)
fun run(vararg xs: Line) = line("run", *xs)
fun running(vararg xs: Line) = line("running", *xs)
fun runtime(vararg xs: Line) = line("runtime", *xs)
fun s(vararg xs: Line) = line("s", *xs)
fun save(vararg xs: Line) = line("save", *xs)
fun sawtooth(vararg xs: Line) = line("sawtooth", *xs)
fun scheme(vararg xs: Line) = line("scheme", *xs)
fun scope(vararg xs: Line) = line("scope", *xs)
fun scoped(vararg xs: Line) = line("scoped", *xs)
fun scopes(vararg xs: Line) = line("scopes", *xs)
fun screen(vararg xs: Line) = line("screen", *xs)
fun script(vararg xs: Line) = line("script", *xs)
fun search(vararg xs: Line) = line("search", *xs)
fun second(vararg xs: Line) = line("second", *xs)
fun select(vararg xs: Line) = line("select", *xs)
fun semicolon(vararg xs: Line) = line("semicolon", *xs)
fun sentinel(vararg xs: Line) = line("sentinel", *xs)
fun separated(vararg xs: Line) = line("separated", *xs)
fun separator(vararg xs: Line) = line("separator", *xs)
fun sequence(vararg xs: Line) = line("sequence", *xs)
fun sequencer(vararg xs: Line) = line("sequencer", *xs)
fun serial(vararg xs: Line) = line("serial", *xs)
fun server(vararg xs: Line) = line("server", *xs)
fun set(vararg xs: Line) = line("set", *xs)
fun sets(vararg xs: Line) = line("sets", *xs)
fun seven(vararg xs: Line) = line("seven", *xs)
fun sex(vararg xs: Line) = line("sex", *xs)
fun shape(vararg xs: Line) = line("shape", *xs)
fun shapes(vararg xs: Line) = line("shapes", *xs)
fun shift(vararg xs: Line) = line("shift", *xs)
fun short(vararg xs: Line) = line("short", *xs)
fun shortquote(vararg xs: Line) = line("shortquote", *xs)
fun show(vararg xs: Line) = line("show", *xs)
fun shutdown(vararg xs: Line) = line("shutdown", *xs)
fun side(vararg xs: Line) = line("side", *xs)
fun simple(vararg xs: Line) = line("simple", *xs)
fun sin(vararg xs: Line) = line("sin", *xs)
fun sine(vararg xs: Line) = line("sine", *xs)
fun single(vararg xs: Line) = line("single", *xs)
fun singleton(vararg xs: Line) = line("singleton", *xs)
fun singly(vararg xs: Line) = line("singly", *xs)
fun sinh(vararg xs: Line) = line("sinh", *xs)
fun sink(vararg xs: Line) = line("sink", *xs)
fun sinks(vararg xs: Line) = line("sinks", *xs)
fun six(vararg xs: Line) = line("six", *xs)
fun size(vararg xs: Line) = line("size", *xs)
fun skip(vararg xs: Line) = line("skip", *xs)
fun slash(vararg xs: Line) = line("slash", *xs)
fun sleep(vararg xs: Line) = line("sleep", *xs)
fun slice(vararg xs: Line) = line("slice", *xs)
fun sliding(vararg xs: Line) = line("sliding", *xs)
fun slow(vararg xs: Line) = line("slow", *xs)
fun some(vararg xs: Line) = line("some", *xs)
fun sort(vararg xs: Line) = line("sort", *xs)
fun source(vararg xs: Line) = line("source", *xs)
fun space(vararg xs: Line) = line("space", *xs)
fun span(vararg xs: Line) = line("span", *xs)
fun spanning(vararg xs: Line) = line("spanning", *xs)
fun splice(vararg xs: Line) = line("splice", *xs)
fun split(vararg xs: Line) = line("split", *xs)
fun spouse(vararg xs: Line) = line("spouse", *xs)
fun square(vararg xs: Line) = line("square", *xs)
fun squared(vararg xs: Line) = line("squared", *xs)
fun sr(vararg xs: Line) = line("sr", *xs)
fun stack(vararg xs: Line) = line("stack", *xs)
fun stacks(vararg xs: Line) = line("stacks", *xs)
fun stand(vararg xs: Line) = line("stand", *xs)
fun start(vararg xs: Line) = line("start", *xs)
fun started(vararg xs: Line) = line("started", *xs)
fun starts(vararg xs: Line) = line("starts", *xs)
fun state(vararg xs: Line) = line("state", *xs)
fun statement(vararg xs: Line) = line("statement", *xs)
fun statements(vararg xs: Line) = line("statements", *xs)
fun static(vararg xs: Line) = line("static", *xs)
fun std(vararg xs: Line) = line("std", *xs)
fun step(vararg xs: Line) = line("step", *xs)
fun stop(vararg xs: Line) = line("stop", *xs)
fun stream(vararg xs: Line) = line("stream", *xs)
fun string(vararg xs: Line) = line("string", *xs)
fun strings(vararg xs: Line) = line("strings", *xs)
fun stroke(vararg xs: Line) = line("stroke", *xs)
fun struct(vararg xs: Line) = line("struct", *xs)
fun sub(vararg xs: Line) = line("sub", *xs)
fun submit(vararg xs: Line) = line("submit", *xs)
fun subpackages(vararg xs: Line) = line("subpackages", *xs)
fun substr(vararg xs: Line) = line("substr", *xs)
fun substring(vararg xs: Line) = line("substring", *xs)
fun subtract(vararg xs: Line) = line("subtract", *xs)
fun successor(vararg xs: Line) = line("successor", *xs)
fun suffix(vararg xs: Line) = line("suffix", *xs)
fun sum(vararg xs: Line) = line("sum", *xs)
fun _super(vararg xs: Line) = line("super", *xs)
fun superclass(vararg xs: Line) = line("superclass", *xs)
fun supervisor(vararg xs: Line) = line("supervisor", *xs)
fun supplier(vararg xs: Line) = line("supplier", *xs)
fun suppliers(vararg xs: Line) = line("suppliers", *xs)
fun suppressed(vararg xs: Line) = line("suppressed", *xs)
fun switch(vararg xs: Line) = line("switch", *xs)
fun symbol(vararg xs: Line) = line("symbol", *xs)
fun symbols(vararg xs: Line) = line("symbols", *xs)
fun syntax(vararg xs: Line) = line("syntax", *xs)
fun system(vararg xs: Line) = line("system", *xs)
fun t(vararg xs: Line) = line("t", *xs)
fun tab(vararg xs: Line) = line("tab", *xs)
fun tag(vararg xs: Line) = line("tag", *xs)
fun tail(vararg xs: Line) = line("tail", *xs)
fun tan(vararg xs: Line) = line("tan", *xs)
fun tanh(vararg xs: Line) = line("tanh", *xs)
fun tap(vararg xs: Line) = line("tap", *xs)
fun target(vararg xs: Line) = line("target", *xs)
fun temp(vararg xs: Line) = line("temp", *xs)
fun template(vararg xs: Line) = line("template", *xs)
fun tempo(vararg xs: Line) = line("tempo", *xs)
fun tempos(vararg xs: Line) = line("tempos", *xs)
fun ten(vararg xs: Line) = line("ten", *xs)
fun term(vararg xs: Line) = line("term", *xs)
fun terms(vararg xs: Line) = line("terms", *xs)
fun test(vararg xs: Line) = line("test", *xs)
fun testing(vararg xs: Line) = line("testing", *xs)
fun tests(vararg xs: Line) = line("tests", *xs)
fun text(vararg xs: Line) = line("text", *xs)
fun that(vararg xs: Line) = line("that", *xs)
fun the(vararg xs: Line) = line("the", *xs)
fun then(vararg xs: Line) = line("then", *xs)
fun third(vararg xs: Line) = line("third", *xs)
fun _this(vararg xs: Line) = line("this", *xs)
fun thread(vararg xs: Line) = line("thread", *xs)
fun three(vararg xs: Line) = line("three", *xs)
fun _throw(vararg xs: Line) = line("throw", *xs)
fun throwable(vararg xs: Line) = line("throwable", *xs)
fun throws(vararg xs: Line) = line("throws", *xs)
fun thunk(vararg xs: Line) = line("thunk", *xs)
fun time(vararg xs: Line) = line("time", *xs)
fun timeout(vararg xs: Line) = line("timeout", *xs)
fun times(vararg xs: Line) = line("times", *xs)
fun timestamp(vararg xs: Line) = line("timestamp", *xs)
fun to(vararg xs: Line) = line("to", *xs)
fun top(vararg xs: Line) = line("top", *xs)
fun touch(vararg xs: Line) = line("touch", *xs)
fun trace(vararg xs: Line) = line("trace", *xs)
fun traced(vararg xs: Line) = line("traced", *xs)
fun track(vararg xs: Line) = line("track", *xs)
fun transform(vararg xs: Line) = line("transform", *xs)
fun translate(vararg xs: Line) = line("translate", *xs)
fun triangle(vararg xs: Line) = line("triangle", *xs)
fun trigger(vararg xs: Line) = line("trigger", *xs)
fun _true(vararg xs: Line) = line("true", *xs)
fun truth(vararg xs: Line) = line("truth", *xs)
fun tuple(vararg xs: Line) = line("tuple", *xs)
fun two(vararg xs: Line) = line("two", *xs)
fun type(vararg xs: Line) = line("type", *xs)
fun types(vararg xs: Line) = line("types", *xs)
fun u(vararg xs: Line) = line("u", *xs)
fun uint(vararg xs: Line) = line("uint", *xs)
fun uint16(vararg xs: Line) = line("uint16", *xs)
fun uint32(vararg xs: Line) = line("uint32", *xs)
fun uint64(vararg xs: Line) = line("uint64", *xs)
fun uint8(vararg xs: Line) = line("uint8", *xs)
fun unchecked(vararg xs: Line) = line("unchecked", *xs)
fun undefined(vararg xs: Line) = line("undefined", *xs)
fun underscorify(vararg xs: Line) = line("underscorify", *xs)
fun undo(vararg xs: Line) = line("undo", *xs)
fun unhandled(vararg xs: Line) = line("unhandled", *xs)
fun unindent(vararg xs: Line) = line("unindent", *xs)
fun unit(vararg xs: Line) = line("unit", *xs)
fun unknown(vararg xs: Line) = line("unknown", *xs)
fun unmodifiable(vararg xs: Line) = line("unmodifiable", *xs)
fun unquote(vararg xs: Line) = line("unquote", *xs)
fun unquoted(vararg xs: Line) = line("unquoted", *xs)
fun unread(vararg xs: Line) = line("unread", *xs)
fun unresolved(vararg xs: Line) = line("unresolved", *xs)
fun unsafe(vararg xs: Line) = line("unsafe", *xs)
fun unsafes(vararg xs: Line) = line("unsafes", *xs)
fun unshift(vararg xs: Line) = line("unshift", *xs)
fun unsigned(vararg xs: Line) = line("unsigned", *xs)
fun update(vararg xs: Line) = line("update", *xs)
fun upper(vararg xs: Line) = line("upper", *xs)
fun uri(vararg xs: Line) = line("uri", *xs)
fun url(vararg xs: Line) = line("url", *xs)
fun use(vararg xs: Line) = line("use", *xs)
fun user(vararg xs: Line) = line("user", *xs)
fun util(vararg xs: Line) = line("util", *xs)
fun v(vararg xs: Line) = line("v", *xs)
fun _val(vararg xs: Line) = line("val", *xs)
fun value(vararg xs: Line) = line("value", *xs)
fun values(vararg xs: Line) = line("values", *xs)
fun _var(vararg xs: Line) = line("var", *xs)
fun variable(vararg xs: Line) = line("variable", *xs)
fun variables(vararg xs: Line) = line("variables", *xs)
fun vec(vararg xs: Line) = line("vec", *xs)
fun vec2(vararg xs: Line) = line("vec2", *xs)
fun vec3(vararg xs: Line) = line("vec3", *xs)
fun vec4(vararg xs: Line) = line("vec4", *xs)
fun vector(vararg xs: Line) = line("vector", *xs)
fun versionuid(vararg xs: Line) = line("versionuid", *xs)
fun vertical(vararg xs: Line) = line("vertical", *xs)
fun vertically(vararg xs: Line) = line("vertically", *xs)
fun view(vararg xs: Line) = line("view", *xs)
fun violet(vararg xs: Line) = line("violet", *xs)
fun visibility(vararg xs: Line) = line("visibility", *xs)
fun visible(vararg xs: Line) = line("visible", *xs)
fun visit(vararg xs: Line) = line("visit", *xs)
fun visitor(vararg xs: Line) = line("visitor", *xs)
fun void(vararg xs: Line) = line("void", *xs)
fun volume(vararg xs: Line) = line("volume", *xs)
fun w(vararg xs: Line) = line("w", *xs)
fun wait(vararg xs: Line) = line("wait", *xs)
fun warn(vararg xs: Line) = line("warn", *xs)
fun warning(vararg xs: Line) = line("warning", *xs)
fun watch(vararg xs: Line) = line("watch", *xs)
fun wave(vararg xs: Line) = line("wave", *xs)
fun weak(vararg xs: Line) = line("weak", *xs)
fun week(vararg xs: Line) = line("week", *xs)
fun _while(vararg xs: Line) = line("while", *xs)
fun white(vararg xs: Line) = line("white", *xs)
fun widget(vararg xs: Line) = line("widget", *xs)
fun width(vararg xs: Line) = line("width", *xs)
fun wife(vararg xs: Line) = line("wife", *xs)
fun win(vararg xs: Line) = line("win", *xs)
fun window(vararg xs: Line) = line("window", *xs)
fun wire(vararg xs: Line) = line("wire", *xs)
fun with(vararg xs: Line) = line("with", *xs)
fun without(vararg xs: Line) = line("without", *xs)
fun word(vararg xs: Line) = line("word", *xs)
fun wrap(vararg xs: Line) = line("wrap", *xs)
fun write(vararg xs: Line) = line("write", *xs)
fun writing(vararg xs: Line) = line("writing", *xs)
fun x(vararg xs: Line) = line("x", *xs)
fun xfib(vararg xs: Line) = line("xfib", *xs)
fun xor(vararg xs: Line) = line("xor", *xs)
fun xy(vararg xs: Line) = line("xy", *xs)
fun xyz(vararg xs: Line) = line("xyz", *xs)
fun y(vararg xs: Line) = line("y", *xs)
fun year(vararg xs: Line) = line("year", *xs)
fun yellow(vararg xs: Line) = line("yellow", *xs)
fun yes(vararg xs: Line) = line("yes", *xs)
fun z(vararg xs: Line) = line("z", *xs)
fun zero(vararg xs: Line) = line("zero", *xs)
fun zoom(vararg xs: Line) = line("zoom", *xs)
