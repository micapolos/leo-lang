package leo32.dsl

fun a(vararg xs: Expr) = expr("a", *xs)
fun above(vararg xs: Expr) = expr("above", *xs)
fun abs(vararg xs: Expr) = expr("abs", *xs)
fun absent(vararg xs: Expr) = expr("absent", *xs)
fun absolute(vararg xs: Expr) = expr("absolute", *xs)
fun abstract(vararg xs: Expr) = expr("abstract", *xs)
fun abstraction(vararg xs: Expr) = expr("abstraction", *xs)
fun accept(vararg xs: Expr) = expr("accept", *xs)
fun access(vararg xs: Expr) = expr("access", *xs)
fun accessible(vararg xs: Expr) = expr("accessible", *xs)
fun acos(vararg xs: Expr) = expr("acos", *xs)
fun activity(vararg xs: Expr) = expr("activity", *xs)
fun add(vararg xs: Expr) = expr("add", *xs)
fun addr(vararg xs: Expr) = expr("addr", *xs)
fun address(vararg xs: Expr) = expr("address", *xs)
fun admin(vararg xs: Expr) = expr("admin", *xs)
fun after(vararg xs: Expr) = expr("after", *xs)
fun age(vararg xs: Expr) = expr("age", *xs)
fun all(vararg xs: Expr) = expr("all", *xs)
fun alloc(vararg xs: Expr) = expr("alloc", *xs)
fun allocate(vararg xs: Expr) = expr("allocate", *xs)
fun alpha(vararg xs: Expr) = expr("alpha", *xs)
fun always(vararg xs: Expr) = expr("always", *xs)
fun am(vararg xs: Expr) = expr("am", *xs)
fun amplitude(vararg xs: Expr) = expr("amplitude", *xs)
fun anchor(vararg xs: Expr) = expr("anchor", *xs)
fun and(vararg xs: Expr) = expr("and", *xs)
fun anon(vararg xs: Expr) = expr("anon", *xs)
fun antialias(vararg xs: Expr) = expr("antialias", *xs)
fun antialiasing(vararg xs: Expr) = expr("antialiasing", *xs)
fun any(vararg xs: Expr) = expr("any", *xs)
fun anything(vararg xs: Expr) = expr("anything", *xs)
fun appearance(vararg xs: Expr) = expr("appearance", *xs)
fun append(vararg xs: Expr) = expr("append", *xs)
fun appending(vararg xs: Expr) = expr("appending", *xs)
fun application(vararg xs: Expr) = expr("application", *xs)
fun applicative(vararg xs: Expr) = expr("applicative", *xs)
fun applier(vararg xs: Expr) = expr("applier", *xs)
fun apply(vararg xs: Expr) = expr("apply", *xs)
fun arc(vararg xs: Expr) = expr("arc", *xs)
fun area(vararg xs: Expr) = expr("area", *xs)
fun arg(vararg xs: Expr) = expr("arg", *xs)
fun argb(vararg xs: Expr) = expr("argb", *xs)
fun args(vararg xs: Expr) = expr("args", *xs)
fun argument(vararg xs: Expr) = expr("argument", *xs)
fun arguments(vararg xs: Expr) = expr("arguments", *xs)
fun arity(vararg xs: Expr) = expr("arity", *xs)
fun arr(vararg xs: Expr) = expr("arr", *xs)
fun array(vararg xs: Expr) = expr("array", *xs)
fun arraycopy(vararg xs: Expr) = expr("arraycopy", *xs)
fun arrow(vararg xs: Expr) = expr("arrow", *xs)
fun _as(vararg xs: Expr) = expr("as", *xs)
fun asin(vararg xs: Expr) = expr("asin", *xs)
fun assert(vararg xs: Expr) = expr("assert", *xs)
fun assignable(vararg xs: Expr) = expr("assignable", *xs)
fun async(vararg xs: Expr) = expr("async", *xs)
fun at(vararg xs: Expr) = expr("at", *xs)
fun atan(vararg xs: Expr) = expr("atan", *xs)
fun attention(vararg xs: Expr) = expr("attention", *xs)
fun audio(vararg xs: Expr) = expr("audio", *xs)
fun awt(vararg xs: Expr) = expr("awt", *xs)
fun b(vararg xs: Expr) = expr("b", *xs)
fun back(vararg xs: Expr) = expr("back", *xs)
fun background(vararg xs: Expr) = expr("background", *xs)
fun backslash(vararg xs: Expr) = expr("backslash", *xs)
fun backtrace(vararg xs: Expr) = expr("backtrace", *xs)
fun ball(vararg xs: Expr) = expr("ball", *xs)
fun ban(vararg xs: Expr) = expr("ban", *xs)
fun base(vararg xs: Expr) = expr("base", *xs)
fun becomes(vararg xs: Expr) = expr("becomes", *xs)
fun before(vararg xs: Expr) = expr("before", *xs)
fun begin(vararg xs: Expr) = expr("begin", *xs)
fun being(vararg xs: Expr) = expr("being", *xs)
fun below(vararg xs: Expr) = expr("below", *xs)
fun big(vararg xs: Expr) = expr("big", *xs)
fun binary(vararg xs: Expr) = expr("binary", *xs)
fun bind(vararg xs: Expr) = expr("bind", *xs)
fun bindings(vararg xs: Expr) = expr("bindings", *xs)
fun bit(vararg xs: Expr) = expr("bit", *xs)
fun black(vararg xs: Expr) = expr("black", *xs)
fun block(vararg xs: Expr) = expr("block", *xs)
fun blue(vararg xs: Expr) = expr("blue", *xs)
fun body(vararg xs: Expr) = expr("body", *xs)
fun bool(vararg xs: Expr) = expr("bool", *xs)
fun boolean(vararg xs: Expr) = expr("boolean", *xs)
fun booleans(vararg xs: Expr) = expr("booleans", *xs)
fun boost(vararg xs: Expr) = expr("boost", *xs)
fun bottom(vararg xs: Expr) = expr("bottom", *xs)
fun bounds(vararg xs: Expr) = expr("bounds", *xs)
fun box(vararg xs: Expr) = expr("box", *xs)
fun bpm(vararg xs: Expr) = expr("bpm", *xs)
fun branch(vararg xs: Expr) = expr("branch", *xs)
fun buf(vararg xs: Expr) = expr("buf", *xs)
fun buffer(vararg xs: Expr) = expr("buffer", *xs)
fun build(vararg xs: Expr) = expr("build", *xs)
fun builder(vararg xs: Expr) = expr("builder", *xs)
fun by(vararg xs: Expr) = expr("by", *xs)
fun byte(vararg xs: Expr) = expr("byte", *xs)
fun bytes(vararg xs: Expr) = expr("bytes", *xs)
fun c(vararg xs: Expr) = expr("c", *xs)
fun cache(vararg xs: Expr) = expr("cache", *xs)
fun call(vararg xs: Expr) = expr("call", *xs)
fun called(vararg xs: Expr) = expr("called", *xs)
fun calling(vararg xs: Expr) = expr("calling", *xs)
fun cancel(vararg xs: Expr) = expr("cancel", *xs)
fun cancelable(vararg xs: Expr) = expr("cancelable", *xs)
fun cancelled(vararg xs: Expr) = expr("cancelled", *xs)
fun canvas(vararg xs: Expr) = expr("canvas", *xs)
fun cap(vararg xs: Expr) = expr("cap", *xs)
fun caps(vararg xs: Expr) = expr("caps", *xs)
fun case(vararg xs: Expr) = expr("case", *xs)
fun cast(vararg xs: Expr) = expr("cast", *xs)
fun catching(vararg xs: Expr) = expr("catching", *xs)
fun cause(vararg xs: Expr) = expr("cause", *xs)
fun caution(vararg xs: Expr) = expr("caution", *xs)
fun center(vararg xs: Expr) = expr("center", *xs)
fun chain(vararg xs: Expr) = expr("chain", *xs)
fun change(vararg xs: Expr) = expr("change", *xs)
fun char(vararg xs: Expr) = expr("char", *xs)
fun character(vararg xs: Expr) = expr("character", *xs)
fun cheat(vararg xs: Expr) = expr("cheat", *xs)
fun check(vararg xs: Expr) = expr("check", *xs)
fun checked(vararg xs: Expr) = expr("checked", *xs)
fun child(vararg xs: Expr) = expr("child", *xs)
fun children(vararg xs: Expr) = expr("children", *xs)
fun circle(vararg xs: Expr) = expr("circle", *xs)
fun _class(vararg xs: Expr) = expr("class", *xs)
fun classes(vararg xs: Expr) = expr("classes", *xs)
fun clear(vararg xs: Expr) = expr("clear", *xs)
fun click(vararg xs: Expr) = expr("click", *xs)
fun clip(vararg xs: Expr) = expr("clip", *xs)
fun clock(vararg xs: Expr) = expr("clock", *xs)
fun clone(vararg xs: Expr) = expr("clone", *xs)
fun clones(vararg xs: Expr) = expr("clones", *xs)
fun close(vararg xs: Expr) = expr("close", *xs)
fun closeable(vararg xs: Expr) = expr("closeable", *xs)
fun closed(vararg xs: Expr) = expr("closed", *xs)
fun closure(vararg xs: Expr) = expr("closure", *xs)
fun code(vararg xs: Expr) = expr("code", *xs)
fun codeblock(vararg xs: Expr) = expr("codeblock", *xs)
fun codegen(vararg xs: Expr) = expr("codegen", *xs)
fun collect(vararg xs: Expr) = expr("collect", *xs)
fun collecting(vararg xs: Expr) = expr("collecting", *xs)
fun color(vararg xs: Expr) = expr("color", *xs)
fun colors(vararg xs: Expr) = expr("colors", *xs)
fun column(vararg xs: Expr) = expr("column", *xs)
fun columns(vararg xs: Expr) = expr("columns", *xs)
fun com(vararg xs: Expr) = expr("com", *xs)
fun comfort(vararg xs: Expr) = expr("comfort", *xs)
fun comma(vararg xs: Expr) = expr("comma", *xs)
fun command(vararg xs: Expr) = expr("command", *xs)
fun comment(vararg xs: Expr) = expr("comment", *xs)
fun common(vararg xs: Expr) = expr("common", *xs)
fun compact(vararg xs: Expr) = expr("compact", *xs)
fun compare(vararg xs: Expr) = expr("compare", *xs)
fun compass(vararg xs: Expr) = expr("compass", *xs)
fun component(vararg xs: Expr) = expr("component", *xs)
fun components(vararg xs: Expr) = expr("components", *xs)
fun compute(vararg xs: Expr) = expr("compute", *xs)
fun concat(vararg xs: Expr) = expr("concat", *xs)
fun condition(vararg xs: Expr) = expr("condition", *xs)
fun conflicts(vararg xs: Expr) = expr("conflicts", *xs)
fun connect(vararg xs: Expr) = expr("connect", *xs)
fun connected(vararg xs: Expr) = expr("connected", *xs)
fun connection(vararg xs: Expr) = expr("connection", *xs)
fun connections(vararg xs: Expr) = expr("connections", *xs)
fun console(vararg xs: Expr) = expr("console", *xs)
fun const(vararg xs: Expr) = expr("const", *xs)
fun constant(vararg xs: Expr) = expr("constant", *xs)
fun constructor(vararg xs: Expr) = expr("constructor", *xs)
fun constructors(vararg xs: Expr) = expr("constructors", *xs)
fun constructs(vararg xs: Expr) = expr("constructs", *xs)
fun constuctor(vararg xs: Expr) = expr("constuctor", *xs)
fun consumer(vararg xs: Expr) = expr("consumer", *xs)
fun consumers(vararg xs: Expr) = expr("consumers", *xs)
fun contain(vararg xs: Expr) = expr("contain", *xs)
fun contains(vararg xs: Expr) = expr("contains", *xs)
fun content(vararg xs: Expr) = expr("content", *xs)
fun context(vararg xs: Expr) = expr("context", *xs)
fun continuous(vararg xs: Expr) = expr("continuous", *xs)
fun control(vararg xs: Expr) = expr("control", *xs)
fun convert(vararg xs: Expr) = expr("convert", *xs)
fun coord(vararg xs: Expr) = expr("coord", *xs)
fun coordinate(vararg xs: Expr) = expr("coordinate", *xs)
fun coordinates(vararg xs: Expr) = expr("coordinates", *xs)
fun coords(vararg xs: Expr) = expr("coords", *xs)
fun copies(vararg xs: Expr) = expr("copies", *xs)
fun copy(vararg xs: Expr) = expr("copy", *xs)
fun cos(vararg xs: Expr) = expr("cos", *xs)
fun cosh(vararg xs: Expr) = expr("cosh", *xs)
fun count(vararg xs: Expr) = expr("count", *xs)
fun counter(vararg xs: Expr) = expr("counter", *xs)
fun cout(vararg xs: Expr) = expr("cout", *xs)
fun cover(vararg xs: Expr) = expr("cover", *xs)
fun crash(vararg xs: Expr) = expr("crash", *xs)
fun create(vararg xs: Expr) = expr("create", *xs)
fun created(vararg xs: Expr) = expr("created", *xs)
fun ctor(vararg xs: Expr) = expr("ctor", *xs)
fun current(vararg xs: Expr) = expr("current", *xs)
fun curve(vararg xs: Expr) = expr("curve", *xs)
fun cut(vararg xs: Expr) = expr("cut", *xs)
fun cyan(vararg xs: Expr) = expr("cyan", *xs)
fun d(vararg xs: Expr) = expr("d", *xs)
fun dare(vararg xs: Expr) = expr("dare", *xs)
fun dark(vararg xs: Expr) = expr("dark", *xs)
fun data(vararg xs: Expr) = expr("data", *xs)
fun database(vararg xs: Expr) = expr("database", *xs)
fun day(vararg xs: Expr) = expr("day", *xs)
fun debug(vararg xs: Expr) = expr("debug", *xs)
fun declaration(vararg xs: Expr) = expr("declaration", *xs)
fun declared(vararg xs: Expr) = expr("declared", *xs)
fun declaring(vararg xs: Expr) = expr("declaring", *xs)
fun deepnight(vararg xs: Expr) = expr("deepnight", *xs)
fun def(vararg xs: Expr) = expr("def", *xs)
fun default(vararg xs: Expr) = expr("default", *xs)
fun define(vararg xs: Expr) = expr("define", *xs)
fun delete(vararg xs: Expr) = expr("delete", *xs)
fun demo(vararg xs: Expr) = expr("demo", *xs)
fun depth(vararg xs: Expr) = expr("depth", *xs)
fun derive(vararg xs: Expr) = expr("derive", *xs)
fun destroy(vararg xs: Expr) = expr("destroy", *xs)
fun detector(vararg xs: Expr) = expr("detector", *xs)
fun dict(vararg xs: Expr) = expr("dict", *xs)
fun dictionary(vararg xs: Expr) = expr("dictionary", *xs)
fun did(vararg xs: Expr) = expr("did", *xs)
fun difference(vararg xs: Expr) = expr("difference", *xs)
fun digest(vararg xs: Expr) = expr("digest", *xs)
fun dimensions(vararg xs: Expr) = expr("dimensions", *xs)
fun direct(vararg xs: Expr) = expr("direct", *xs)
fun display(vararg xs: Expr) = expr("display", *xs)
fun div(vararg xs: Expr) = expr("div", *xs)
fun divide(vararg xs: Expr) = expr("divide", *xs)
fun divided(vararg xs: Expr) = expr("divided", *xs)
fun divmod(vararg xs: Expr) = expr("divmod", *xs)
fun _do(vararg xs: Expr) = expr("do", *xs)
fun document(vararg xs: Expr) = expr("document", *xs)
fun done(vararg xs: Expr) = expr("done", *xs)
fun dot(vararg xs: Expr) = expr("dot", *xs)
fun double(vararg xs: Expr) = expr("double", *xs)
fun dp(vararg xs: Expr) = expr("dp", *xs)
fun draw(vararg xs: Expr) = expr("draw", *xs)
fun drawing(vararg xs: Expr) = expr("drawing", *xs)
fun ds(vararg xs: Expr) = expr("ds", *xs)
fun duty(vararg xs: Expr) = expr("duty", *xs)
fun dynamic(vararg xs: Expr) = expr("dynamic", *xs)
fun dynamics(vararg xs: Expr) = expr("dynamics", *xs)
fun e(vararg xs: Expr) = expr("e", *xs)
fun each(vararg xs: Expr) = expr("each", *xs)
fun edge(vararg xs: Expr) = expr("edge", *xs)
fun eight(vararg xs: Expr) = expr("eight", *xs)
fun either(vararg xs: Expr) = expr("either", *xs)
fun element(vararg xs: Expr) = expr("element", *xs)
fun elements(vararg xs: Expr) = expr("elements", *xs)
fun _else(vararg xs: Expr) = expr("else", *xs)
fun email(vararg xs: Expr) = expr("email", *xs)
fun empty(vararg xs: Expr) = expr("empty", *xs)
fun end(vararg xs: Expr) = expr("end", *xs)
fun ends(vararg xs: Expr) = expr("ends", *xs)
fun enter(vararg xs: Expr) = expr("enter", *xs)
fun entries(vararg xs: Expr) = expr("entries", *xs)
fun entry(vararg xs: Expr) = expr("entry", *xs)
fun enum(vararg xs: Expr) = expr("enum", *xs)
fun enums(vararg xs: Expr) = expr("enums", *xs)
fun eq(vararg xs: Expr) = expr("eq", *xs)
fun equal(vararg xs: Expr) = expr("equal", *xs)
fun equals(vararg xs: Expr) = expr("equals", *xs)
fun equatable(vararg xs: Expr) = expr("equatable", *xs)
fun error(vararg xs: Expr) = expr("error", *xs)
fun esc(vararg xs: Expr) = expr("esc", *xs)
fun escape(vararg xs: Expr) = expr("escape", *xs)
fun eval(vararg xs: Expr) = expr("eval", *xs)
fun evaluate(vararg xs: Expr) = expr("evaluate", *xs)
fun evaluated(vararg xs: Expr) = expr("evaluated", *xs)
fun event(vararg xs: Expr) = expr("event", *xs)
fun events(vararg xs: Expr) = expr("events", *xs)
fun exactly(vararg xs: Expr) = expr("exactly", *xs)
fun examples(vararg xs: Expr) = expr("examples", *xs)
fun exception(vararg xs: Expr) = expr("exception", *xs)
fun exceptions(vararg xs: Expr) = expr("exceptions", *xs)
fun exclusive(vararg xs: Expr) = expr("exclusive", *xs)
fun exec(vararg xs: Expr) = expr("exec", *xs)
fun executable(vararg xs: Expr) = expr("executable", *xs)
fun execute(vararg xs: Expr) = expr("execute", *xs)
fun execution(vararg xs: Expr) = expr("execution", *xs)
fun executor(vararg xs: Expr) = expr("executor", *xs)
fun exists(vararg xs: Expr) = expr("exists", *xs)
fun exit(vararg xs: Expr) = expr("exit", *xs)
fun expression(vararg xs: Expr) = expr("expression", *xs)
fun ext(vararg xs: Expr) = expr("ext", *xs)
fun extends(vararg xs: Expr) = expr("extends", *xs)
fun extractor(vararg xs: Expr) = expr("extractor", *xs)
fun f(vararg xs: Expr) = expr("f", *xs)
fun factory(vararg xs: Expr) = expr("factory", *xs)
fun fading(vararg xs: Expr) = expr("fading", *xs)
fun failed(vararg xs: Expr) = expr("failed", *xs)
fun failures(vararg xs: Expr) = expr("failures", *xs)
fun _false(vararg xs: Expr) = expr("false", *xs)
fun family(vararg xs: Expr) = expr("family", *xs)
fun fast(vararg xs: Expr) = expr("fast", *xs)
fun father(vararg xs: Expr) = expr("father", *xs)
fun female(vararg xs: Expr) = expr("female", *xs)
fun fetch(vararg xs: Expr) = expr("fetch", *xs)
fun fib(vararg xs: Expr) = expr("fib", *xs)
fun field(vararg xs: Expr) = expr("field", *xs)
fun fields(vararg xs: Expr) = expr("fields", *xs)
fun file(vararg xs: Expr) = expr("file", *xs)
fun files(vararg xs: Expr) = expr("files", *xs)
fun fill(vararg xs: Expr) = expr("fill", *xs)
fun filter(vararg xs: Expr) = expr("filter", *xs)
fun final(vararg xs: Expr) = expr("final", *xs)
fun finality(vararg xs: Expr) = expr("finality", *xs)
fun finalizer(vararg xs: Expr) = expr("finalizer", *xs)
fun find(vararg xs: Expr) = expr("find", *xs)
fun finite(vararg xs: Expr) = expr("finite", *xs)
fun first(vararg xs: Expr) = expr("first", *xs)
fun five(vararg xs: Expr) = expr("five", *xs)
fun flat(vararg xs: Expr) = expr("flat", *xs)
fun flip(vararg xs: Expr) = expr("flip", *xs)
fun float(vararg xs: Expr) = expr("float", *xs)
fun float32(vararg xs: Expr) = expr("float32", *xs)
fun float64(vararg xs: Expr) = expr("float64", *xs)
fun floating(vararg xs: Expr) = expr("floating", *xs)
fun flush(vararg xs: Expr) = expr("flush", *xs)
fun fn(vararg xs: Expr) = expr("fn", *xs)
fun fold(vararg xs: Expr) = expr("fold", *xs)
fun folder(vararg xs: Expr) = expr("folder", *xs)
fun font(vararg xs: Expr) = expr("font", *xs)
fun footer(vararg xs: Expr) = expr("footer", *xs)
fun _for(vararg xs: Expr) = expr("for", *xs)
fun foreground(vararg xs: Expr) = expr("foreground", *xs)
fun forget(vararg xs: Expr) = expr("forget", *xs)
fun form(vararg xs: Expr) = expr("form", *xs)
fun found(vararg xs: Expr) = expr("found", *xs)
fun four(vararg xs: Expr) = expr("four", *xs)
fun fragment(vararg xs: Expr) = expr("fragment", *xs)
fun frame(vararg xs: Expr) = expr("frame", *xs)
fun free(vararg xs: Expr) = expr("free", *xs)
fun freeze(vararg xs: Expr) = expr("freeze", *xs)
fun frequency(vararg xs: Expr) = expr("frequency", *xs)
fun from(vararg xs: Expr) = expr("from", *xs)
fun frozen(vararg xs: Expr) = expr("frozen", *xs)
fun full(vararg xs: Expr) = expr("full", *xs)
fun fully(vararg xs: Expr) = expr("fully", *xs)
fun _fun(vararg xs: Expr) = expr("fun", *xs)
fun function(vararg xs: Expr) = expr("function", *xs)
fun functions(vararg xs: Expr) = expr("functions", *xs)
fun functor(vararg xs: Expr) = expr("functor", *xs)
fun future(vararg xs: Expr) = expr("future", *xs)
fun futures(vararg xs: Expr) = expr("futures", *xs)
fun g(vararg xs: Expr) = expr("g", *xs)
fun game(vararg xs: Expr) = expr("game", *xs)
fun gen(vararg xs: Expr) = expr("gen", *xs)
fun generic(vararg xs: Expr) = expr("generic", *xs)
fun generics(vararg xs: Expr) = expr("generics", *xs)
fun get(vararg xs: Expr) = expr("get", *xs)
fun gets(vararg xs: Expr) = expr("gets", *xs)
fun getting(vararg xs: Expr) = expr("getting", *xs)
fun give(vararg xs: Expr) = expr("give", *xs)
fun gives(vararg xs: Expr) = expr("gives", *xs)
fun global(vararg xs: Expr) = expr("global", *xs)
fun glyph(vararg xs: Expr) = expr("glyph", *xs)
fun google(vararg xs: Expr) = expr("google", *xs)
fun gray(vararg xs: Expr) = expr("gray", *xs)
fun green(vararg xs: Expr) = expr("green", *xs)
fun grey(vararg xs: Expr) = expr("grey", *xs)
fun grid(vararg xs: Expr) = expr("grid", *xs)
fun h(vararg xs: Expr) = expr("h", *xs)
fun hack(vararg xs: Expr) = expr("hack", *xs)
fun hacker(vararg xs: Expr) = expr("hacker", *xs)
fun handle(vararg xs: Expr) = expr("handle", *xs)
fun has(vararg xs: Expr) = expr("has", *xs)
fun hash(vararg xs: Expr) = expr("hash", *xs)
fun hashes(vararg xs: Expr) = expr("hashes", *xs)
fun haxe(vararg xs: Expr) = expr("haxe", *xs)
fun head(vararg xs: Expr) = expr("head", *xs)
fun header(vararg xs: Expr) = expr("header", *xs)
fun heap(vararg xs: Expr) = expr("heap", *xs)
fun height(vararg xs: Expr) = expr("height", *xs)
fun heights(vararg xs: Expr) = expr("heights", *xs)
fun hi(vararg xs: Expr) = expr("hi", *xs)
fun high(vararg xs: Expr) = expr("high", *xs)
fun hint(vararg xs: Expr) = expr("hint", *xs)
fun holder(vararg xs: Expr) = expr("holder", *xs)
fun horizontal(vararg xs: Expr) = expr("horizontal", *xs)
fun horizontally(vararg xs: Expr) = expr("horizontally", *xs)
fun host(vararg xs: Expr) = expr("host", *xs)
fun hour(vararg xs: Expr) = expr("hour", *xs)
fun html(vararg xs: Expr) = expr("html", *xs)
fun http(vararg xs: Expr) = expr("http", *xs)
fun husband(vararg xs: Expr) = expr("husband", *xs)
fun hx(vararg xs: Expr) = expr("hx", *xs)
fun i(vararg xs: Expr) = expr("i", *xs)
fun identifier(vararg xs: Expr) = expr("identifier", *xs)
fun identifiers(vararg xs: Expr) = expr("identifiers", *xs)
fun _if(vararg xs: Expr) = expr("if", *xs)
fun immediate(vararg xs: Expr) = expr("immediate", *xs)
fun immutable(vararg xs: Expr) = expr("immutable", *xs)
fun impl(vararg xs: Expr) = expr("impl", *xs)
fun implement(vararg xs: Expr) = expr("implement", *xs)
fun implements(vararg xs: Expr) = expr("implements", *xs)
fun import(vararg xs: Expr) = expr("import", *xs)
fun _in(vararg xs: Expr) = expr("in", *xs)
fun inbpm(vararg xs: Expr) = expr("inbpm", *xs)
fun indent(vararg xs: Expr) = expr("indent", *xs)
fun index(vararg xs: Expr) = expr("index", *xs)
fun infinite(vararg xs: Expr) = expr("infinite", *xs)
fun info(vararg xs: Expr) = expr("info", *xs)
fun inherit(vararg xs: Expr) = expr("inherit", *xs)
fun init(vararg xs: Expr) = expr("init", *xs)
fun initial(vararg xs: Expr) = expr("initial", *xs)
fun initializer(vararg xs: Expr) = expr("initializer", *xs)
fun inline(vararg xs: Expr) = expr("inline", *xs)
fun input(vararg xs: Expr) = expr("input", *xs)
fun insert(vararg xs: Expr) = expr("insert", *xs)
fun instance(vararg xs: Expr) = expr("instance", *xs)
fun instrument(vararg xs: Expr) = expr("instrument", *xs)
fun instruments(vararg xs: Expr) = expr("instruments", *xs)
fun int(vararg xs: Expr) = expr("int", *xs)
fun int16(vararg xs: Expr) = expr("int16", *xs)
fun int32(vararg xs: Expr) = expr("int32", *xs)
fun int64(vararg xs: Expr) = expr("int64", *xs)
fun int8(vararg xs: Expr) = expr("int8", *xs)
fun integer(vararg xs: Expr) = expr("integer", *xs)
fun integers(vararg xs: Expr) = expr("integers", *xs)
fun integral(vararg xs: Expr) = expr("integral", *xs)
fun intent(vararg xs: Expr) = expr("intent", *xs)
fun intercept(vararg xs: Expr) = expr("intercept", *xs)
fun _interface(vararg xs: Expr) = expr("interface", *xs)
fun intern(vararg xs: Expr) = expr("intern", *xs)
fun interrupt(vararg xs: Expr) = expr("interrupt", *xs)
fun inventory(vararg xs: Expr) = expr("inventory", *xs)
fun invoke(vararg xs: Expr) = expr("invoke", *xs)
fun ios(vararg xs: Expr) = expr("ios", *xs)
fun ipad(vararg xs: Expr) = expr("ipad", *xs)
fun iphone(vararg xs: Expr) = expr("iphone", *xs)
fun _is(vararg xs: Expr) = expr("is", *xs)
fun it(vararg xs: Expr) = expr("it", *xs)
fun iterable(vararg xs: Expr) = expr("iterable", *xs)
fun iterables(vararg xs: Expr) = expr("iterables", *xs)
fun iteratively(vararg xs: Expr) = expr("iteratively", *xs)
fun iterator(vararg xs: Expr) = expr("iterator", *xs)
fun iterators(vararg xs: Expr) = expr("iterators", *xs)
fun itself(vararg xs: Expr) = expr("itself", *xs)
fun j(vararg xs: Expr) = expr("j", *xs)
fun jam(vararg xs: Expr) = expr("jam", *xs)
fun jar(vararg xs: Expr) = expr("jar", *xs)
fun java(vararg xs: Expr) = expr("java", *xs)
fun join(vararg xs: Expr) = expr("join", *xs)
fun jump(vararg xs: Expr) = expr("jump", *xs)
fun just(vararg xs: Expr) = expr("just", *xs)
fun k(vararg xs: Expr) = expr("k", *xs)
fun key(vararg xs: Expr) = expr("key", *xs)
fun keyboard(vararg xs: Expr) = expr("keyboard", *xs)
fun keyword(vararg xs: Expr) = expr("keyword", *xs)
fun kick(vararg xs: Expr) = expr("kick", *xs)
fun kotlin(vararg xs: Expr) = expr("kotlin", *xs)
fun l(vararg xs: Expr) = expr("l", *xs)
fun label(vararg xs: Expr) = expr("label", *xs)
fun lambda(vararg xs: Expr) = expr("lambda", *xs)
fun lang(vararg xs: Expr) = expr("lang", *xs)
fun last(vararg xs: Expr) = expr("last", *xs)
fun latch(vararg xs: Expr) = expr("latch", *xs)
fun left(vararg xs: Expr) = expr("left", *xs)
fun len(vararg xs: Expr) = expr("len", *xs)
fun length(vararg xs: Expr) = expr("length", *xs)
fun lengths(vararg xs: Expr) = expr("lengths", *xs)
fun leo(vararg xs: Expr) = expr("leo", *xs)
fun leonize(vararg xs: Expr) = expr("leonize", *xs)
fun leonized(vararg xs: Expr) = expr("leonized", *xs)
fun leonizer(vararg xs: Expr) = expr("leonizer", *xs)
fun lhs(vararg xs: Expr) = expr("lhs", *xs)
fun lib(vararg xs: Expr) = expr("lib", *xs)
fun library(vararg xs: Expr) = expr("library", *xs)
fun light(vararg xs: Expr) = expr("light", *xs)
fun line(vararg xs: Expr) = expr("line", *xs)
fun linked(vararg xs: Expr) = expr("linked", *xs)
fun list(vararg xs: Expr) = expr("list", *xs)
fun listener(vararg xs: Expr) = expr("listener", *xs)
fun lists(vararg xs: Expr) = expr("lists", *xs)
fun literal(vararg xs: Expr) = expr("literal", *xs)
fun lo(vararg xs: Expr) = expr("lo", *xs)
fun load(vararg xs: Expr) = expr("load", *xs)
fun loader(vararg xs: Expr) = expr("loader", *xs)
fun lock(vararg xs: Expr) = expr("lock", *xs)
fun log(vararg xs: Expr) = expr("log", *xs)
fun login(vararg xs: Expr) = expr("login", *xs)
fun logout(vararg xs: Expr) = expr("logout", *xs)
fun lol(vararg xs: Expr) = expr("lol", *xs)
fun long(vararg xs: Expr) = expr("long", *xs)
fun look(vararg xs: Expr) = expr("look", *xs)
fun lookup(vararg xs: Expr) = expr("lookup", *xs)
fun loop(vararg xs: Expr) = expr("loop", *xs)
fun lost(vararg xs: Expr) = expr("lost", *xs)
fun low(vararg xs: Expr) = expr("low", *xs)
fun lower(vararg xs: Expr) = expr("lower", *xs)
fun ludum(vararg xs: Expr) = expr("ludum", *xs)
fun ludumdare(vararg xs: Expr) = expr("ludumdare", *xs)
fun m(vararg xs: Expr) = expr("m", *xs)
fun mac(vararg xs: Expr) = expr("mac", *xs)
fun macos(vararg xs: Expr) = expr("macos", *xs)
fun magenta(vararg xs: Expr) = expr("magenta", *xs)
fun mail(vararg xs: Expr) = expr("mail", *xs)
fun main(vararg xs: Expr) = expr("main", *xs)
fun make(vararg xs: Expr) = expr("make", *xs)
fun male(vararg xs: Expr) = expr("male", *xs)
fun manager(vararg xs: Expr) = expr("manager", *xs)
fun map(vararg xs: Expr) = expr("map", *xs)
fun mapping(vararg xs: Expr) = expr("mapping", *xs)
fun maps(vararg xs: Expr) = expr("maps", *xs)
fun mapt(vararg xs: Expr) = expr("mapt", *xs)
fun margin(vararg xs: Expr) = expr("margin", *xs)
fun marriage(vararg xs: Expr) = expr("marriage", *xs)
fun match(vararg xs: Expr) = expr("match", *xs)
fun matcher(vararg xs: Expr) = expr("matcher", *xs)
fun matches(vararg xs: Expr) = expr("matches", *xs)
fun matching(vararg xs: Expr) = expr("matching", *xs)
fun max(vararg xs: Expr) = expr("max", *xs)
fun maybe(vararg xs: Expr) = expr("maybe", *xs)
fun measure(vararg xs: Expr) = expr("measure", *xs)
fun melody(vararg xs: Expr) = expr("melody", *xs)
fun mem(vararg xs: Expr) = expr("mem", *xs)
fun member(vararg xs: Expr) = expr("member", *xs)
fun members(vararg xs: Expr) = expr("members", *xs)
fun membership(vararg xs: Expr) = expr("membership", *xs)
fun memory(vararg xs: Expr) = expr("memory", *xs)
fun merger(vararg xs: Expr) = expr("merger", *xs)
fun message(vararg xs: Expr) = expr("message", *xs)
fun meta(vararg xs: Expr) = expr("meta", *xs)
fun method(vararg xs: Expr) = expr("method", *xs)
fun methods(vararg xs: Expr) = expr("methods", *xs)
fun metrics(vararg xs: Expr) = expr("metrics", *xs)
fun micapolos(vararg xs: Expr) = expr("micapolos", *xs)
fun middle(vararg xs: Expr) = expr("middle", *xs)
fun millis(vararg xs: Expr) = expr("millis", *xs)
fun min(vararg xs: Expr) = expr("min", *xs)
fun minus(vararg xs: Expr) = expr("minus", *xs)
fun minute(vararg xs: Expr) = expr("minute", *xs)
fun mod(vararg xs: Expr) = expr("mod", *xs)
fun mode(vararg xs: Expr) = expr("mode", *xs)
fun modifier(vararg xs: Expr) = expr("modifier", *xs)
fun modifiers(vararg xs: Expr) = expr("modifiers", *xs)
fun module(vararg xs: Expr) = expr("module", *xs)
fun monad(vararg xs: Expr) = expr("monad", *xs)
fun month(vararg xs: Expr) = expr("month", *xs)
fun more(vararg xs: Expr) = expr("more", *xs)
fun mother(vararg xs: Expr) = expr("mother", *xs)
fun motion(vararg xs: Expr) = expr("motion", *xs)
fun mouse(vararg xs: Expr) = expr("mouse", *xs)
fun mul(vararg xs: Expr) = expr("mul", *xs)
fun multiply(vararg xs: Expr) = expr("multiply", *xs)
fun mutable(vararg xs: Expr) = expr("mutable", *xs)
fun my(vararg xs: Expr) = expr("my", *xs)
fun n(vararg xs: Expr) = expr("n", *xs)
fun name(vararg xs: Expr) = expr("name", *xs)
fun named(vararg xs: Expr) = expr("named", *xs)
fun names(vararg xs: Expr) = expr("names", *xs)
fun nand(vararg xs: Expr) = expr("nand", *xs)
fun native(vararg xs: Expr) = expr("native", *xs)
fun negate(vararg xs: Expr) = expr("negate", *xs)
fun new(vararg xs: Expr) = expr("new", *xs)
fun newline(vararg xs: Expr) = expr("newline", *xs)
fun next(vararg xs: Expr) = expr("next", *xs)
fun night(vararg xs: Expr) = expr("night", *xs)
fun nil(vararg xs: Expr) = expr("nil", *xs)
fun nine(vararg xs: Expr) = expr("nine", *xs)
fun no(vararg xs: Expr) = expr("no", *xs)
fun node(vararg xs: Expr) = expr("node", *xs)
fun non(vararg xs: Expr) = expr("non", *xs)
fun none(vararg xs: Expr) = expr("none", *xs)
fun nor(vararg xs: Expr) = expr("nor", *xs)
fun not(vararg xs: Expr) = expr("not", *xs)
fun note(vararg xs: Expr) = expr("note", *xs)
fun notes(vararg xs: Expr) = expr("notes", *xs)
fun nothing(vararg xs: Expr) = expr("nothing", *xs)
fun now(vararg xs: Expr) = expr("now", *xs)
fun _null(vararg xs: Expr) = expr("null", *xs)
fun nullable(vararg xs: Expr) = expr("nullable", *xs)
fun number(vararg xs: Expr) = expr("number", *xs)
fun o(vararg xs: Expr) = expr("o", *xs)
fun obj(vararg xs: Expr) = expr("obj", *xs)
fun _object(vararg xs: Expr) = expr("object", *xs)
fun objects(vararg xs: Expr) = expr("objects", *xs)
fun of(vararg xs: Expr) = expr("of", *xs)
fun off(vararg xs: Expr) = expr("off", *xs)
fun office(vararg xs: Expr) = expr("office", *xs)
fun offset(vararg xs: Expr) = expr("offset", *xs)
fun ofib(vararg xs: Expr) = expr("ofib", *xs)
fun on(vararg xs: Expr) = expr("on", *xs)
fun one(vararg xs: Expr) = expr("one", *xs)
fun only(vararg xs: Expr) = expr("only", *xs)
fun op(vararg xs: Expr) = expr("op", *xs)
fun open(vararg xs: Expr) = expr("open", *xs)
fun operation(vararg xs: Expr) = expr("operation", *xs)
fun operator(vararg xs: Expr) = expr("operator", *xs)
fun option(vararg xs: Expr) = expr("option", *xs)
fun optional(vararg xs: Expr) = expr("optional", *xs)
fun optionals(vararg xs: Expr) = expr("optionals", *xs)
fun or(vararg xs: Expr) = expr("or", *xs)
fun orange(vararg xs: Expr) = expr("orange", *xs)
fun order(vararg xs: Expr) = expr("order", *xs)
fun ordinal(vararg xs: Expr) = expr("ordinal", *xs)
fun org(vararg xs: Expr) = expr("org", *xs)
fun original(vararg xs: Expr) = expr("original", *xs)
fun otherwise(vararg xs: Expr) = expr("otherwise", *xs)
fun out(vararg xs: Expr) = expr("out", *xs)
fun outline(vararg xs: Expr) = expr("outline", *xs)
fun output(vararg xs: Expr) = expr("output", *xs)
fun oval(vararg xs: Expr) = expr("oval", *xs)
fun over(vararg xs: Expr) = expr("over", *xs)
fun owner(vararg xs: Expr) = expr("owner", *xs)
fun p(vararg xs: Expr) = expr("p", *xs)
fun _package(vararg xs: Expr) = expr("package", *xs)
fun packages(vararg xs: Expr) = expr("packages", *xs)
fun page(vararg xs: Expr) = expr("page", *xs)
fun paint(vararg xs: Expr) = expr("paint", *xs)
fun pair(vararg xs: Expr) = expr("pair", *xs)
fun pane(vararg xs: Expr) = expr("pane", *xs)
fun param(vararg xs: Expr) = expr("param", *xs)
fun parameter(vararg xs: Expr) = expr("parameter", *xs)
fun parameters(vararg xs: Expr) = expr("parameters", *xs)
fun params(vararg xs: Expr) = expr("params", *xs)
fun parent(vararg xs: Expr) = expr("parent", *xs)
fun parentheses(vararg xs: Expr) = expr("parentheses", *xs)
fun parse(vararg xs: Expr) = expr("parse", *xs)
fun parser(vararg xs: Expr) = expr("parser", *xs)
fun pass(vararg xs: Expr) = expr("pass", *xs)
fun password(vararg xs: Expr) = expr("password", *xs)
fun paste(vararg xs: Expr) = expr("paste", *xs)
fun path(vararg xs: Expr) = expr("path", *xs)
fun pattern(vararg xs: Expr) = expr("pattern", *xs)
fun pause(vararg xs: Expr) = expr("pause", *xs)
fun payload(vararg xs: Expr) = expr("payload", *xs)
fun pc(vararg xs: Expr) = expr("pc", *xs)
fun period(vararg xs: Expr) = expr("period", *xs)
fun person(vararg xs: Expr) = expr("person", *xs)
fun phase(vararg xs: Expr) = expr("phase", *xs)
fun phone(vararg xs: Expr) = expr("phone", *xs)
fun pi(vararg xs: Expr) = expr("pi", *xs)
fun pin(vararg xs: Expr) = expr("pin", *xs)
fun pink(vararg xs: Expr) = expr("pink", *xs)
fun pins(vararg xs: Expr) = expr("pins", *xs)
fun pixel(vararg xs: Expr) = expr("pixel", *xs)
fun pkg(vararg xs: Expr) = expr("pkg", *xs)
fun plain(vararg xs: Expr) = expr("plain", *xs)
fun play(vararg xs: Expr) = expr("play", *xs)
fun plus(vararg xs: Expr) = expr("plus", *xs)
fun pm(vararg xs: Expr) = expr("pm", *xs)
fun point(vararg xs: Expr) = expr("point", *xs)
fun pop(vararg xs: Expr) = expr("pop", *xs)
fun port(vararg xs: Expr) = expr("port", *xs)
fun position(vararg xs: Expr) = expr("position", *xs)
fun possible(vararg xs: Expr) = expr("possible", *xs)
fun post(vararg xs: Expr) = expr("post", *xs)
fun ppq(vararg xs: Expr) = expr("ppq", *xs)
fun predecessor(vararg xs: Expr) = expr("predecessor", *xs)
fun prefix(vararg xs: Expr) = expr("prefix", *xs)
fun preprocess(vararg xs: Expr) = expr("preprocess", *xs)
fun preprocessor(vararg xs: Expr) = expr("preprocessor", *xs)
fun present(vararg xs: Expr) = expr("present", *xs)
fun prev(vararg xs: Expr) = expr("prev", *xs)
fun previous(vararg xs: Expr) = expr("previous", *xs)
fun primitive(vararg xs: Expr) = expr("primitive", *xs)
fun print(vararg xs: Expr) = expr("print", *xs)
fun printer(vararg xs: Expr) = expr("printer", *xs)
fun printing(vararg xs: Expr) = expr("printing", *xs)
fun println(vararg xs: Expr) = expr("println", *xs)
fun private(vararg xs: Expr) = expr("private", *xs)
fun process(vararg xs: Expr) = expr("process", *xs)
fun processed(vararg xs: Expr) = expr("processed", *xs)
fun producer(vararg xs: Expr) = expr("producer", *xs)
fun product(vararg xs: Expr) = expr("product", *xs)
fun program(vararg xs: Expr) = expr("program", *xs)
fun property(vararg xs: Expr) = expr("property", *xs)
fun protected(vararg xs: Expr) = expr("protected", *xs)
fun public(vararg xs: Expr) = expr("public", *xs)
fun pull(vararg xs: Expr) = expr("pull", *xs)
fun push(vararg xs: Expr) = expr("push", *xs)
fun put(vararg xs: Expr) = expr("put", *xs)
fun q(vararg xs: Expr) = expr("q", *xs)
fun query(vararg xs: Expr) = expr("query", *xs)
fun queue(vararg xs: Expr) = expr("queue", *xs)
fun quicksort(vararg xs: Expr) = expr("quicksort", *xs)
fun quote(vararg xs: Expr) = expr("quote", *xs)
fun quoted(vararg xs: Expr) = expr("quoted", *xs)
fun r(vararg xs: Expr) = expr("r", *xs)
fun radius(vararg xs: Expr) = expr("radius", *xs)
fun random(vararg xs: Expr) = expr("random", *xs)
fun read(vararg xs: Expr) = expr("read", *xs)
fun reader(vararg xs: Expr) = expr("reader", *xs)
fun reading(vararg xs: Expr) = expr("reading", *xs)
fun readonly(vararg xs: Expr) = expr("readonly", *xs)
fun readutf(vararg xs: Expr) = expr("readutf", *xs)
fun recover(vararg xs: Expr) = expr("recover", *xs)
fun rect(vararg xs: Expr) = expr("rect", *xs)
fun rectangle(vararg xs: Expr) = expr("rectangle", *xs)
fun recursively(vararg xs: Expr) = expr("recursively", *xs)
fun red(vararg xs: Expr) = expr("red", *xs)
fun redirect(vararg xs: Expr) = expr("redirect", *xs)
fun ref(vararg xs: Expr) = expr("ref", *xs)
fun reference(vararg xs: Expr) = expr("reference", *xs)
fun refl(vararg xs: Expr) = expr("refl", *xs)
fun reflect(vararg xs: Expr) = expr("reflect", *xs)
fun remainder(vararg xs: Expr) = expr("remainder", *xs)
fun remove(vararg xs: Expr) = expr("remove", *xs)
fun render(vararg xs: Expr) = expr("render", *xs)
fun rendering(vararg xs: Expr) = expr("rendering", *xs)
fun repeat(vararg xs: Expr) = expr("repeat", *xs)
fun replace(vararg xs: Expr) = expr("replace", *xs)
fun required(vararg xs: Expr) = expr("required", *xs)
fun reset(vararg xs: Expr) = expr("reset", *xs)
fun resolution(vararg xs: Expr) = expr("resolution", *xs)
fun resolve(vararg xs: Expr) = expr("resolve", *xs)
fun resolved(vararg xs: Expr) = expr("resolved", *xs)
fun resolver(vararg xs: Expr) = expr("resolver", *xs)
fun resource(vararg xs: Expr) = expr("resource", *xs)
fun result(vararg xs: Expr) = expr("result", *xs)
fun resume(vararg xs: Expr) = expr("resume", *xs)
fun resumed(vararg xs: Expr) = expr("resumed", *xs)
fun ret(vararg xs: Expr) = expr("ret", *xs)
fun reti(vararg xs: Expr) = expr("reti", *xs)
fun _return(vararg xs: Expr) = expr("return", *xs)
fun returns(vararg xs: Expr) = expr("returns", *xs)
fun reverse(vararg xs: Expr) = expr("reverse", *xs)
fun rgb(vararg xs: Expr) = expr("rgb", *xs)
fun rgba(vararg xs: Expr) = expr("rgba", *xs)
fun rhs(vararg xs: Expr) = expr("rhs", *xs)
fun right(vararg xs: Expr) = expr("right", *xs)
fun root(vararg xs: Expr) = expr("root", *xs)
fun round(vararg xs: Expr) = expr("round", *xs)
fun row(vararg xs: Expr) = expr("row", *xs)
fun rows(vararg xs: Expr) = expr("rows", *xs)
fun rule(vararg xs: Expr) = expr("rule", *xs)
fun run(vararg xs: Expr) = expr("run", *xs)
fun running(vararg xs: Expr) = expr("running", *xs)
fun runtime(vararg xs: Expr) = expr("runtime", *xs)
fun s(vararg xs: Expr) = expr("s", *xs)
fun save(vararg xs: Expr) = expr("save", *xs)
fun sawtooth(vararg xs: Expr) = expr("sawtooth", *xs)
fun scheme(vararg xs: Expr) = expr("scheme", *xs)
fun scope(vararg xs: Expr) = expr("scope", *xs)
fun scoped(vararg xs: Expr) = expr("scoped", *xs)
fun scopes(vararg xs: Expr) = expr("scopes", *xs)
fun screen(vararg xs: Expr) = expr("screen", *xs)
fun script(vararg xs: Expr) = expr("script", *xs)
fun search(vararg xs: Expr) = expr("search", *xs)
fun second(vararg xs: Expr) = expr("second", *xs)
fun select(vararg xs: Expr) = expr("select", *xs)
fun semicolon(vararg xs: Expr) = expr("semicolon", *xs)
fun sentinel(vararg xs: Expr) = expr("sentinel", *xs)
fun separated(vararg xs: Expr) = expr("separated", *xs)
fun separator(vararg xs: Expr) = expr("separator", *xs)
fun sequence(vararg xs: Expr) = expr("sequence", *xs)
fun sequencer(vararg xs: Expr) = expr("sequencer", *xs)
fun serial(vararg xs: Expr) = expr("serial", *xs)
fun server(vararg xs: Expr) = expr("server", *xs)
fun set(vararg xs: Expr) = expr("set", *xs)
fun sets(vararg xs: Expr) = expr("sets", *xs)
fun seven(vararg xs: Expr) = expr("seven", *xs)
fun sex(vararg xs: Expr) = expr("sex", *xs)
fun shape(vararg xs: Expr) = expr("shape", *xs)
fun shapes(vararg xs: Expr) = expr("shapes", *xs)
fun shift(vararg xs: Expr) = expr("shift", *xs)
fun short(vararg xs: Expr) = expr("short", *xs)
fun shortquote(vararg xs: Expr) = expr("shortquote", *xs)
fun show(vararg xs: Expr) = expr("show", *xs)
fun shutdown(vararg xs: Expr) = expr("shutdown", *xs)
fun side(vararg xs: Expr) = expr("side", *xs)
fun simple(vararg xs: Expr) = expr("simple", *xs)
fun sin(vararg xs: Expr) = expr("sin", *xs)
fun sine(vararg xs: Expr) = expr("sine", *xs)
fun single(vararg xs: Expr) = expr("single", *xs)
fun singleton(vararg xs: Expr) = expr("singleton", *xs)
fun singly(vararg xs: Expr) = expr("singly", *xs)
fun sinh(vararg xs: Expr) = expr("sinh", *xs)
fun sink(vararg xs: Expr) = expr("sink", *xs)
fun sinks(vararg xs: Expr) = expr("sinks", *xs)
fun six(vararg xs: Expr) = expr("six", *xs)
fun size(vararg xs: Expr) = expr("size", *xs)
fun skip(vararg xs: Expr) = expr("skip", *xs)
fun slash(vararg xs: Expr) = expr("slash", *xs)
fun sleep(vararg xs: Expr) = expr("sleep", *xs)
fun slice(vararg xs: Expr) = expr("slice", *xs)
fun sliding(vararg xs: Expr) = expr("sliding", *xs)
fun slow(vararg xs: Expr) = expr("slow", *xs)
fun some(vararg xs: Expr) = expr("some", *xs)
fun sort(vararg xs: Expr) = expr("sort", *xs)
fun source(vararg xs: Expr) = expr("source", *xs)
fun space(vararg xs: Expr) = expr("space", *xs)
fun span(vararg xs: Expr) = expr("span", *xs)
fun spanning(vararg xs: Expr) = expr("spanning", *xs)
fun splice(vararg xs: Expr) = expr("splice", *xs)
fun split(vararg xs: Expr) = expr("split", *xs)
fun spouse(vararg xs: Expr) = expr("spouse", *xs)
fun square(vararg xs: Expr) = expr("square", *xs)
fun squared(vararg xs: Expr) = expr("squared", *xs)
fun sr(vararg xs: Expr) = expr("sr", *xs)
fun stack(vararg xs: Expr) = expr("stack", *xs)
fun stacks(vararg xs: Expr) = expr("stacks", *xs)
fun stand(vararg xs: Expr) = expr("stand", *xs)
fun start(vararg xs: Expr) = expr("start", *xs)
fun started(vararg xs: Expr) = expr("started", *xs)
fun starts(vararg xs: Expr) = expr("starts", *xs)
fun state(vararg xs: Expr) = expr("state", *xs)
fun statement(vararg xs: Expr) = expr("statement", *xs)
fun statements(vararg xs: Expr) = expr("statements", *xs)
fun static(vararg xs: Expr) = expr("static", *xs)
fun std(vararg xs: Expr) = expr("std", *xs)
fun step(vararg xs: Expr) = expr("step", *xs)
fun stop(vararg xs: Expr) = expr("stop", *xs)
fun stream(vararg xs: Expr) = expr("stream", *xs)
fun string(vararg xs: Expr) = expr("string", *xs)
fun strings(vararg xs: Expr) = expr("strings", *xs)
fun stroke(vararg xs: Expr) = expr("stroke", *xs)
fun struct(vararg xs: Expr) = expr("struct", *xs)
fun sub(vararg xs: Expr) = expr("sub", *xs)
fun submit(vararg xs: Expr) = expr("submit", *xs)
fun subpackages(vararg xs: Expr) = expr("subpackages", *xs)
fun substr(vararg xs: Expr) = expr("substr", *xs)
fun substring(vararg xs: Expr) = expr("substring", *xs)
fun subtract(vararg xs: Expr) = expr("subtract", *xs)
fun successor(vararg xs: Expr) = expr("successor", *xs)
fun suffix(vararg xs: Expr) = expr("suffix", *xs)
fun sum(vararg xs: Expr) = expr("sum", *xs)
fun _super(vararg xs: Expr) = expr("super", *xs)
fun superclass(vararg xs: Expr) = expr("superclass", *xs)
fun supervisor(vararg xs: Expr) = expr("supervisor", *xs)
fun supplier(vararg xs: Expr) = expr("supplier", *xs)
fun suppliers(vararg xs: Expr) = expr("suppliers", *xs)
fun suppressed(vararg xs: Expr) = expr("suppressed", *xs)
fun symbol(vararg xs: Expr) = expr("symbol", *xs)
fun symbols(vararg xs: Expr) = expr("symbols", *xs)
fun syntax(vararg xs: Expr) = expr("syntax", *xs)
fun system(vararg xs: Expr) = expr("system", *xs)
fun t(vararg xs: Expr) = expr("t", *xs)
fun tab(vararg xs: Expr) = expr("tab", *xs)
fun tag(vararg xs: Expr) = expr("tag", *xs)
fun tail(vararg xs: Expr) = expr("tail", *xs)
fun tan(vararg xs: Expr) = expr("tan", *xs)
fun tanh(vararg xs: Expr) = expr("tanh", *xs)
fun tap(vararg xs: Expr) = expr("tap", *xs)
fun target(vararg xs: Expr) = expr("target", *xs)
fun temp(vararg xs: Expr) = expr("temp", *xs)
fun template(vararg xs: Expr) = expr("template", *xs)
fun tempo(vararg xs: Expr) = expr("tempo", *xs)
fun tempos(vararg xs: Expr) = expr("tempos", *xs)
fun ten(vararg xs: Expr) = expr("ten", *xs)
fun term(vararg xs: Expr) = expr("term", *xs)
fun terms(vararg xs: Expr) = expr("terms", *xs)
fun test(vararg xs: Expr) = expr("test", *xs)
fun testing(vararg xs: Expr) = expr("testing", *xs)
fun tests(vararg xs: Expr) = expr("tests", *xs)
fun text(vararg xs: Expr) = expr("text", *xs)
fun that(vararg xs: Expr) = expr("that", *xs)
fun the(vararg xs: Expr) = expr("the", *xs)
fun then(vararg xs: Expr) = expr("then", *xs)
fun third(vararg xs: Expr) = expr("third", *xs)
fun _this(vararg xs: Expr) = expr("this", *xs)
fun thread(vararg xs: Expr) = expr("thread", *xs)
fun three(vararg xs: Expr) = expr("three", *xs)
fun _throw(vararg xs: Expr) = expr("throw", *xs)
fun throwable(vararg xs: Expr) = expr("throwable", *xs)
fun throws(vararg xs: Expr) = expr("throws", *xs)
fun thunk(vararg xs: Expr) = expr("thunk", *xs)
fun time(vararg xs: Expr) = expr("time", *xs)
fun timeout(vararg xs: Expr) = expr("timeout", *xs)
fun times(vararg xs: Expr) = expr("times", *xs)
fun timestamp(vararg xs: Expr) = expr("timestamp", *xs)
fun to(vararg xs: Expr) = expr("to", *xs)
fun top(vararg xs: Expr) = expr("top", *xs)
fun touch(vararg xs: Expr) = expr("touch", *xs)
fun trace(vararg xs: Expr) = expr("trace", *xs)
fun traced(vararg xs: Expr) = expr("traced", *xs)
fun track(vararg xs: Expr) = expr("track", *xs)
fun transform(vararg xs: Expr) = expr("transform", *xs)
fun translate(vararg xs: Expr) = expr("translate", *xs)
fun triangle(vararg xs: Expr) = expr("triangle", *xs)
fun trigger(vararg xs: Expr) = expr("trigger", *xs)
fun _true(vararg xs: Expr) = expr("true", *xs)
fun truth(vararg xs: Expr) = expr("truth", *xs)
fun tuple(vararg xs: Expr) = expr("tuple", *xs)
fun two(vararg xs: Expr) = expr("two", *xs)
fun type(vararg xs: Expr) = expr("type", *xs)
fun types(vararg xs: Expr) = expr("types", *xs)
fun u(vararg xs: Expr) = expr("u", *xs)
fun uint(vararg xs: Expr) = expr("uint", *xs)
fun uint16(vararg xs: Expr) = expr("uint16", *xs)
fun uint32(vararg xs: Expr) = expr("uint32", *xs)
fun uint64(vararg xs: Expr) = expr("uint64", *xs)
fun uint8(vararg xs: Expr) = expr("uint8", *xs)
fun unchecked(vararg xs: Expr) = expr("unchecked", *xs)
fun undefined(vararg xs: Expr) = expr("undefined", *xs)
fun underscorify(vararg xs: Expr) = expr("underscorify", *xs)
fun undo(vararg xs: Expr) = expr("undo", *xs)
fun unhandled(vararg xs: Expr) = expr("unhandled", *xs)
fun unindent(vararg xs: Expr) = expr("unindent", *xs)
fun unit(vararg xs: Expr) = expr("unit", *xs)
fun unknown(vararg xs: Expr) = expr("unknown", *xs)
fun unmodifiable(vararg xs: Expr) = expr("unmodifiable", *xs)
fun unquote(vararg xs: Expr) = expr("unquote", *xs)
fun unquoted(vararg xs: Expr) = expr("unquoted", *xs)
fun unread(vararg xs: Expr) = expr("unread", *xs)
fun unresolved(vararg xs: Expr) = expr("unresolved", *xs)
fun unsafe(vararg xs: Expr) = expr("unsafe", *xs)
fun unsafes(vararg xs: Expr) = expr("unsafes", *xs)
fun unshift(vararg xs: Expr) = expr("unshift", *xs)
fun unsigned(vararg xs: Expr) = expr("unsigned", *xs)
fun update(vararg xs: Expr) = expr("update", *xs)
fun upper(vararg xs: Expr) = expr("upper", *xs)
fun uri(vararg xs: Expr) = expr("uri", *xs)
fun url(vararg xs: Expr) = expr("url", *xs)
fun use(vararg xs: Expr) = expr("use", *xs)
fun user(vararg xs: Expr) = expr("user", *xs)
fun util(vararg xs: Expr) = expr("util", *xs)
fun v(vararg xs: Expr) = expr("v", *xs)
fun _val(vararg xs: Expr) = expr("val", *xs)
fun value(vararg xs: Expr) = expr("value", *xs)
fun values(vararg xs: Expr) = expr("values", *xs)
fun _var(vararg xs: Expr) = expr("var", *xs)
fun variable(vararg xs: Expr) = expr("variable", *xs)
fun variables(vararg xs: Expr) = expr("variables", *xs)
fun vec(vararg xs: Expr) = expr("vec", *xs)
fun vec2(vararg xs: Expr) = expr("vec2", *xs)
fun vec3(vararg xs: Expr) = expr("vec3", *xs)
fun vec4(vararg xs: Expr) = expr("vec4", *xs)
fun vector(vararg xs: Expr) = expr("vector", *xs)
fun versionuid(vararg xs: Expr) = expr("versionuid", *xs)
fun vertical(vararg xs: Expr) = expr("vertical", *xs)
fun vertically(vararg xs: Expr) = expr("vertically", *xs)
fun view(vararg xs: Expr) = expr("view", *xs)
fun violet(vararg xs: Expr) = expr("violet", *xs)
fun visibility(vararg xs: Expr) = expr("visibility", *xs)
fun visible(vararg xs: Expr) = expr("visible", *xs)
fun visit(vararg xs: Expr) = expr("visit", *xs)
fun visitor(vararg xs: Expr) = expr("visitor", *xs)
fun void(vararg xs: Expr) = expr("void", *xs)
fun volume(vararg xs: Expr) = expr("volume", *xs)
fun w(vararg xs: Expr) = expr("w", *xs)
fun wait(vararg xs: Expr) = expr("wait", *xs)
fun warn(vararg xs: Expr) = expr("warn", *xs)
fun warning(vararg xs: Expr) = expr("warning", *xs)
fun watch(vararg xs: Expr) = expr("watch", *xs)
fun wave(vararg xs: Expr) = expr("wave", *xs)
fun weak(vararg xs: Expr) = expr("weak", *xs)
fun week(vararg xs: Expr) = expr("week", *xs)
fun _while(vararg xs: Expr) = expr("while", *xs)
fun white(vararg xs: Expr) = expr("white", *xs)
fun widget(vararg xs: Expr) = expr("widget", *xs)
fun width(vararg xs: Expr) = expr("width", *xs)
fun wife(vararg xs: Expr) = expr("wife", *xs)
fun win(vararg xs: Expr) = expr("win", *xs)
fun window(vararg xs: Expr) = expr("window", *xs)
fun wire(vararg xs: Expr) = expr("wire", *xs)
fun with(vararg xs: Expr) = expr("with", *xs)
fun without(vararg xs: Expr) = expr("without", *xs)
fun word(vararg xs: Expr) = expr("word", *xs)
fun wrap(vararg xs: Expr) = expr("wrap", *xs)
fun write(vararg xs: Expr) = expr("write", *xs)
fun writing(vararg xs: Expr) = expr("writing", *xs)
fun x(vararg xs: Expr) = expr("x", *xs)
fun xfib(vararg xs: Expr) = expr("xfib", *xs)
fun xor(vararg xs: Expr) = expr("xor", *xs)
fun xy(vararg xs: Expr) = expr("xy", *xs)
fun xyz(vararg xs: Expr) = expr("xyz", *xs)
fun y(vararg xs: Expr) = expr("y", *xs)
fun year(vararg xs: Expr) = expr("year", *xs)
fun yellow(vararg xs: Expr) = expr("yellow", *xs)
fun yes(vararg xs: Expr) = expr("yes", *xs)
fun z(vararg xs: Expr) = expr("z", *xs)
fun zero(vararg xs: Expr) = expr("zero", *xs)
fun zoom(vararg xs: Expr) = expr("zoom", *xs)
