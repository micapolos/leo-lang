package leo15.dsl

infix fun X.a(f: F): X = x("a", f)
infix fun X.above(f: F): X = x("above", f)
infix fun X.abs(f: F): X = x("abs", f)
infix fun X.absent(f: F): X = x("absent", f)
infix fun X.absolute(f: F): X = x("absolute", f)
infix fun X.abstract(f: F): X = x("abstract", f)
infix fun X.abstraction(f: F): X = x("abstraction", f)
infix fun X.accept(f: F): X = x("accept", f)
infix fun X.access(f: F): X = x("access", f)
infix fun X.accessible(f: F): X = x("accessible", f)
infix fun X.acos(f: F): X = x("acos", f)
infix fun X.activity(f: F): X = x("activity", f)
infix fun X.actual(f: F): X = x("actual", f)
infix fun X.add(f: F): X = x("add", f)
infix fun X.addr(f: F): X = x("addr", f)
infix fun X.address(f: F): X = x("address", f)
infix fun X.admin(f: F): X = x("admin", f)
infix fun X.after(f: F): X = x("after", f)
infix fun X.age(f: F): X = x("age", f)
infix fun X.all(f: F): X = x("all", f)
infix fun X.alloc(f: F): X = x("alloc", f)
infix fun X.allocate(f: F): X = x("allocate", f)
infix fun X.alpha(f: F): X = x("alpha", f)
infix fun X.always(f: F): X = x("always", f)
infix fun X.am(f: F): X = x("am", f)
infix fun X.amplitude(f: F): X = x("amplitude", f)
infix fun X.anchor(f: F): X = x("anchor", f)
infix fun X.and(f: F): X = x("and", f)
infix fun X.angle(f: F): X = x("angle", f)
infix fun X.animate(f: F): X = x("animate", f)
infix fun X.animated(f: F): X = x("animated", f)
infix fun X.animation(f: F): X = x("animation", f)
infix fun X.anon(f: F): X = x("anon", f)
infix fun X.antialias(f: F): X = x("antialias", f)
infix fun X.antialiasing(f: F): X = x("antialiasing", f)
infix fun X.anticlockwise(f: F): X = x("anticlockwise", f)
infix fun X.any(f: F): X = x("any", f)
infix fun X.anything(f: F): X = x("anything", f)
infix fun X.appearance(f: F): X = x("appearance", f)
infix fun X.append(f: F): X = x("append", f)
infix fun X.appending(f: F): X = x("appending", f)
infix fun X.application(f: F): X = x("application", f)
infix fun X.applicative(f: F): X = x("applicative", f)
infix fun X.applier(f: F): X = x("applier", f)
infix fun X.apply(f: F): X = x("apply", f)
infix fun X.approximate(f: F): X = x("approximate", f)
infix fun X.arc(f: F): X = x("arc", f)
infix fun X.area(f: F): X = x("area", f)
infix fun X.arg(f: F): X = x("arg", f)
infix fun X.argb(f: F): X = x("argb", f)
infix fun X.args(f: F): X = x("args", f)
infix fun X.argument(f: F): X = x("argument", f)
infix fun X.arguments(f: F): X = x("arguments", f)
infix fun X.arity(f: F): X = x("arity", f)
infix fun X.arr(f: F): X = x("arr", f)
infix fun X.array(f: F): X = x("array", f)
infix fun X.arraycopy(f: F): X = x("arraycopy", f)
infix fun X.arrow(f: F): X = x("arrow", f)
infix fun X.as_(f: F): X = x("as", f)
infix fun X.asin(f: F): X = x("asin", f)
infix fun X.assert(f: F): X = x("assert", f)
infix fun X.assignable(f: F): X = x("assignable", f)
infix fun X.async(f: F): X = x("async", f)
infix fun X.at(f: F): X = x("at", f)
infix fun X.atan(f: F): X = x("atan", f)
infix fun X.attention(f: F): X = x("attention", f)
infix fun X.attr(f: F): X = x("attr", f)
infix fun X.attribute(f: F): X = x("attribute", f)
infix fun X.audio(f: F): X = x("audio", f)
infix fun X.author(f: F): X = x("author", f)
infix fun X.authority(f: F): X = x("authority", f)
infix fun X.awt(f: F): X = x("awt", f)
infix fun X.b(f: F): X = x("b", f)
infix fun X.back(f: F): X = x("back", f)
infix fun X.background(f: F): X = x("background", f)
infix fun X.backslash(f: F): X = x("backslash", f)
infix fun X.backtrace(f: F): X = x("backtrace", f)
infix fun X.ball(f: F): X = x("ball", f)
infix fun X.ban(f: F): X = x("ban", f)
infix fun X.base(f: F): X = x("base", f)
infix fun X.becomes(f: F): X = x("becomes", f)
infix fun X.before(f: F): X = x("before", f)
infix fun X.begin(f: F): X = x("begin", f)
infix fun X.being(f: F): X = x("being", f)
infix fun X.below(f: F): X = x("below", f)
infix fun X.big(f: F): X = x("big", f)
infix fun X.binary(f: F): X = x("binary", f)
infix fun X.bind(f: F): X = x("bind", f)
infix fun X.binding(f: F): X = x("binding", f)
infix fun X.bindings(f: F): X = x("bindings", f)
infix fun X.bit(f: F): X = x("bit", f)
infix fun X.black(f: F): X = x("black", f)
infix fun X.block(f: F): X = x("block", f)
infix fun X.blue(f: F): X = x("blue", f)
infix fun X.body(f: F): X = x("body", f)
infix fun X.bool(f: F): X = x("bool", f)
infix fun X.boolean(f: F): X = x("boolean", f)
infix fun X.booleans(f: F): X = x("booleans", f)
infix fun X.boost(f: F): X = x("boost", f)
infix fun X.bottom(f: F): X = x("bottom", f)
infix fun X.bounds(f: F): X = x("bounds", f)
infix fun X.bold(f: F): X = x("bold", f)
infix fun X.box(f: F): X = x("box", f)
infix fun X.bpm(f: F): X = x("bpm", f)
infix fun X.branch(f: F): X = x("branch", f)
infix fun X.browse(f: F): X = x("browse", f)
infix fun X.buf(f: F): X = x("buf", f)
infix fun X.buffer(f: F): X = x("buffer", f)
infix fun X.build(f: F): X = x("build", f)
infix fun X.builder(f: F): X = x("builder", f)
infix fun X.by(f: F): X = x("by", f)
infix fun X.byte(f: F): X = x("byte", f)
infix fun X.bytes(f: F): X = x("bytes", f)
infix fun X.c(f: F): X = x("c", f)
infix fun X.cache(f: F): X = x("cache", f)
infix fun X.call(f: F): X = x("call", f)
infix fun X.called(f: F): X = x("called", f)
infix fun X.calling(f: F): X = x("calling", f)
infix fun X.cancel(f: F): X = x("cancel", f)
infix fun X.cancelable(f: F): X = x("cancelable", f)
infix fun X.cancelled(f: F): X = x("cancelled", f)
infix fun X.canvas(f: F): X = x("canvas", f)
infix fun X.cap(f: F): X = x("cap", f)
infix fun X.caps(f: F): X = x("caps", f)
infix fun X.case(f: F): X = x("case", f)
infix fun X.cast(f: F): X = x("cast", f)
infix fun X.catching(f: F): X = x("catching", f)
infix fun X.cause(f: F): X = x("cause", f)
infix fun X.caution(f: F): X = x("caution", f)
infix fun X.center(f: F): X = x("center", f)
infix fun X.chain(f: F): X = x("chain", f)
infix fun X.change(f: F): X = x("change", f)
infix fun X.char(f: F): X = x("char", f)
infix fun X.character(f: F): X = x("character", f)
infix fun X.cheat(f: F): X = x("cheat", f)
infix fun X.check(f: F): X = x("check", f)
infix fun X.checked(f: F): X = x("checked", f)
infix fun X.child(f: F): X = x("child", f)
infix fun X.children(f: F): X = x("children", f)
infix fun X.choice(f: F): X = x("choice", f)
infix fun X.circle(f: F): X = x("circle", f)
infix fun X.class_(f: F): X = x("class", f)
infix fun X.classes(f: F): X = x("classes", f)
infix fun X.clear(f: F): X = x("clear", f)
infix fun X.click(f: F): X = x("click", f)
infix fun X.clip(f: F): X = x("clip", f)
infix fun X.clock(f: F): X = x("clock", f)
infix fun X.clockwise(f: F): X = x("clockwise", f)
infix fun X.clone(f: F): X = x("clone", f)
infix fun X.clones(f: F): X = x("clones", f)
infix fun X.close(f: F): X = x("close", f)
infix fun X.closeable(f: F): X = x("closeable", f)
infix fun X.closed(f: F): X = x("closed", f)
infix fun X.closure(f: F): X = x("closure", f)
infix fun X.code(f: F): X = x("code", f)
infix fun X.codeblock(f: F): X = x("codeblock", f)
infix fun X.codegen(f: F): X = x("codegen", f)
infix fun X.collect(f: F): X = x("collect", f)
infix fun X.collecting(f: F): X = x("collecting", f)
infix fun X.color(f: F): X = x("color", f)
infix fun X.colors(f: F): X = x("colors", f)
infix fun X.column(f: F): X = x("column", f)
infix fun X.columns(f: F): X = x("columns", f)
infix fun X.com(f: F): X = x("com", f)
infix fun X.comfort(f: F): X = x("comfort", f)
infix fun X.comma(f: F): X = x("comma", f)
infix fun X.command(f: F): X = x("command", f)
infix fun X.comment(f: F): X = x("comment", f)
infix fun X.comments(f: F): X = x("comments", f)
infix fun X.commenting(f: F): X = x("commenting", f)
infix fun X.common(f: F): X = x("common", f)
infix fun X.compact(f: F): X = x("compact", f)
infix fun X.compare(f: F): X = x("compare", f)
infix fun X.compass(f: F): X = x("compass", f)
infix fun X.compile(f: F): X = x("compile", f)
infix fun X.compiled(f: F): X = x("compiled", f)
infix fun X.compiler(f: F): X = x("compiler", f)
infix fun X.component(f: F): X = x("component", f)
infix fun X.components(f: F): X = x("components", f)
infix fun X.compute(f: F): X = x("compute", f)
infix fun X.concat(f: F): X = x("concat", f)
infix fun X.condition(f: F): X = x("condition", f)
infix fun X.conflicts(f: F): X = x("conflicts", f)
infix fun X.connect(f: F): X = x("connect", f)
infix fun X.connected(f: F): X = x("connected", f)
infix fun X.connection(f: F): X = x("connection", f)
infix fun X.connections(f: F): X = x("connections", f)
infix fun X.console(f: F): X = x("console", f)
infix fun X.const(f: F): X = x("const", f)
infix fun X.constant(f: F): X = x("constant", f)
infix fun X.constructor(f: F): X = x("constructor", f)
infix fun X.constructors(f: F): X = x("constructors", f)
infix fun X.constructs(f: F): X = x("constructs", f)
infix fun X.constuctor(f: F): X = x("constuctor", f)
infix fun X.consumer(f: F): X = x("consumer", f)
infix fun X.consumers(f: F): X = x("consumers", f)
infix fun X.contain(f: F): X = x("contain", f)
infix fun X.contains(f: F): X = x("contains", f)
infix fun X.content(f: F): X = x("content", f)
infix fun X.context(f: F): X = x("context", f)
infix fun X.continuous(f: F): X = x("continuous", f)
infix fun X.control(f: F): X = x("control", f)
infix fun X.convert(f: F): X = x("convert", f)
infix fun X.coord(f: F): X = x("coord", f)
infix fun X.coordinate(f: F): X = x("coordinate", f)
infix fun X.coordinates(f: F): X = x("coordinates", f)
infix fun X.coords(f: F): X = x("coords", f)
infix fun X.copies(f: F): X = x("copies", f)
infix fun X.copy(f: F): X = x("copy", f)
infix fun X.core(f: F): X = x("core", f)
infix fun X.cos(f: F): X = x("cos", f)
infix fun X.cosh(f: F): X = x("cosh", f)
infix fun X.cosinus(f: F): X = x("cosinus", f)
infix fun X.count(f: F): X = x("count", f)
infix fun X.counter(f: F): X = x("counter", f)
infix fun X.cout(f: F): X = x("cout", f)
infix fun X.cover(f: F): X = x("cover", f)
infix fun X.crash(f: F): X = x("crash", f)
infix fun X.create(f: F): X = x("create", f)
infix fun X.created(f: F): X = x("created", f)
infix fun X.ctor(f: F): X = x("ctor", f)
infix fun X.current(f: F): X = x("current", f)
infix fun X.curve(f: F): X = x("curve", f)
infix fun X.cut(f: F): X = x("cut", f)
infix fun X.cyan(f: F): X = x("cyan", f)
infix fun X.d(f: F): X = x("d", f)
infix fun X.dare(f: F): X = x("dare", f)
infix fun X.dark(f: F): X = x("dark", f)
infix fun X.data(f: F): X = x("data", f)
infix fun X.database(f: F): X = x("database", f)
infix fun X.day(f: F): X = x("day", f)
infix fun X.debug(f: F): X = x("debug", f)
infix fun X.decimal(f: F): X = x("decimal", f)
infix fun X.declaration(f: F): X = x("declaration", f)
infix fun X.declared(f: F): X = x("declared", f)
infix fun X.declaring(f: F): X = x("declaring", f)
infix fun X.decrement(f: F): X = x("decrement", f)
infix fun X.deepnight(f: F): X = x("deepnight", f)
infix fun X.def(f: F): X = x("def", f)
infix fun X.default(f: F): X = x("default", f)
infix fun X.define(f: F): X = x("define", f)
infix fun X.definition(f: F): X = x("definition", f)
infix fun X.defined(f: F): X = x("defined", f)
infix fun X.degrees(f: F): X = x("degrees", f)
infix fun X.delete(f: F): X = x("delete", f)
infix fun X.demo(f: F): X = x("demo", f)
infix fun X.depth(f: F): X = x("depth", f)
infix fun X.derive(f: F): X = x("derive", f)
infix fun X.describe(f: F): X = x("describe", f)
infix fun X.destroy(f: F): X = x("destroy", f)
infix fun X.detector(f: F): X = x("detector", f)
infix fun X.dict(f: F): X = x("dict", f)
infix fun X.dictionary(f: F): X = x("dictionary", f)
infix fun X.did(f: F): X = x("did", f)
infix fun X.difference(f: F): X = x("difference", f)
infix fun X.digest(f: F): X = x("digest", f)
infix fun X.digit(f: F): X = x("digit", f)
infix fun X.dimension(f: F): X = x("dimension", f)
infix fun X.dimensional(f: F): X = x("dimensional", f)
infix fun X.dimensions(f: F): X = x("dimensions", f)
infix fun X.direct(f: F): X = x("direct", f)
infix fun X.display(f: F): X = x("display", f)
infix fun X.div(f: F): X = x("div", f)
infix fun X.divide(f: F): X = x("divide", f)
infix fun X.divided(f: F): X = x("divided", f)
infix fun X.divmod(f: F): X = x("divmod", f)
infix fun X.do_(f: F): X = x("do", f)
infix fun X.document(f: F): X = x("document", f)
infix fun X.does(f: F): X = x("does", f)
infix fun X.doing(f: F): X = x("doing", f)
infix fun X.done(f: F): X = x("done", f)
infix fun X.dot(f: F): X = x("dot", f)
infix fun X.double(f: F): X = x("double", f)
infix fun X.dp(f: F): X = x("dp", f)
infix fun X.draw(f: F): X = x("draw", f)
infix fun X.drawing(f: F): X = x("drawing", f)
infix fun X.ds(f: F): X = x("ds", f)
infix fun X.dsl(f: F): X = x("dsl", f)
infix fun X.duty(f: F): X = x("duty", f)
infix fun X.dynamic(f: F): X = x("dynamic", f)
infix fun X.dynamics(f: F): X = x("dynamics", f)
infix fun X.e(f: F): X = x("e", f)
infix fun X.each(f: F): X = x("each", f)
infix fun X.edge(f: F): X = x("edge", f)
infix fun X.eight(f: F): X = x("eight", f)
infix fun X.eighth(f: F): X = x("eighth", f)
infix fun X.either(f: F): X = x("either", f)
infix fun X.element(f: F): X = x("element", f)
infix fun X.elements(f: F): X = x("elements", f)
infix fun X.else_(f: F): X = x("else", f)
infix fun X.email(f: F): X = x("email", f)
infix fun X.empty(f: F): X = x("empty", f)
infix fun X.end(f: F): X = x("end", f)
infix fun X.ends(f: F): X = x("ends", f)
infix fun X.enter(f: F): X = x("enter", f)
infix fun X.entries(f: F): X = x("entries", f)
infix fun X.entry(f: F): X = x("entry", f)
infix fun X.enum(f: F): X = x("enum", f)
infix fun X.enums(f: F): X = x("enums", f)
infix fun X.eq(f: F): X = x("eq", f)
infix fun X.equal(f: F): X = x("equal", f)
infix fun X.equals_(f: F): X = x("equals", f)
infix fun X.equatable(f: F): X = x("equatable", f)
infix fun X.error(f: F): X = x("error", f)
infix fun X.esc(f: F): X = x("esc", f)
infix fun X.escape(f: F): X = x("escape", f)
infix fun X.eval(f: F): X = x("eval", f)
infix fun X.evaluate(f: F): X = x("evaluate", f)
infix fun X.evaluated(f: F): X = x("evaluated", f)
infix fun X.evaluator(f: F): X = x("evaluator", f)
infix fun X.event(f: F): X = x("event", f)
infix fun X.events(f: F): X = x("events", f)
infix fun X.exact(f: F): X = x("exact", f)
infix fun X.exactly(f: F): X = x("exactly", f)
infix fun X.examples(f: F): X = x("examples", f)
infix fun X.exception(f: F): X = x("exception", f)
infix fun X.exceptions(f: F): X = x("exceptions", f)
infix fun X.exclusive(f: F): X = x("exclusive", f)
infix fun X.exec(f: F): X = x("exec", f)
infix fun X.executable(f: F): X = x("executable", f)
infix fun X.execute(f: F): X = x("execute", f)
infix fun X.execution(f: F): X = x("execution", f)
infix fun X.executor(f: F): X = x("executor", f)
infix fun X.exists(f: F): X = x("exists", f)
infix fun X.exit(f: F): X = x("exit", f)
infix fun X.expand(f: F): X = x("expand", f)
infix fun X.expanded(f: F): X = x("expanded", f)
infix fun X.expands(f: F): X = x("expands", f)
infix fun X.expected(f: F): X = x("expected", f)
infix fun X.export(f: F): X = x("export", f)
infix fun X.exported(f: F): X = x("exported", f)
infix fun X.expression(f: F): X = x("expression", f)
infix fun X.ext(f: F): X = x("ext", f)
infix fun X.extends(f: F): X = x("extends", f)
infix fun X.extractor(f: F): X = x("extractor", f)
infix fun X.f(f: F): X = x("f", f)
infix fun X.f32(f: F): X = x("f32", f)
infix fun X.f64(f: F): X = x("f64", f)
infix fun X.factory(f: F): X = x("factory", f)
infix fun X.fading(f: F): X = x("fading", f)
infix fun X.failed(f: F): X = x("failed", f)
infix fun X.failures(f: F): X = x("failures", f)
infix fun X.false_(f: F): X = x("false", f)
infix fun X.family(f: F): X = x("family", f)
infix fun X.fast(f: F): X = x("fast", f)
infix fun X.father(f: F): X = x("father", f)
infix fun X.female(f: F): X = x("female", f)
infix fun X.fetch(f: F): X = x("fetch", f)
infix fun X.fib(f: F): X = x("fib", f)
infix fun X.field(f: F): X = x("field", f)
infix fun X.fields(f: F): X = x("fields", f)
infix fun X.fifth(f: F): X = x("fifth", f)
infix fun X.file(f: F): X = x("file", f)
infix fun X.files(f: F): X = x("files", f)
infix fun X.fill(f: F): X = x("fill", f)
infix fun X.filter(f: F): X = x("filter", f)
infix fun X.final(f: F): X = x("final", f)
infix fun X.finality(f: F): X = x("finality", f)
infix fun X.finalizer(f: F): X = x("finalizer", f)
infix fun X.find(f: F): X = x("find", f)
infix fun X.finite(f: F): X = x("finite", f)
infix fun X.first(f: F): X = x("first", f)
infix fun X.five(f: F): X = x("five", f)
infix fun X.flat(f: F): X = x("flat", f)
infix fun X.flip(f: F): X = x("flip", f)
infix fun X.float(f: F): X = x("float", f)
infix fun X.float32(f: F): X = x("float32", f)
infix fun X.float64(f: F): X = x("float64", f)
infix fun X.floating(f: F): X = x("floating", f)
infix fun X.flush(f: F): X = x("flush", f)
infix fun X.fn(f: F): X = x("fn", f)
infix fun X.fold(f: F): X = x("fold", f)
infix fun X.folded(f: F): X = x("folded", f)
infix fun X.folder(f: F): X = x("folder", f)
infix fun X.font(f: F): X = x("font", f)
infix fun X.footer(f: F): X = x("footer", f)
infix fun X.for_(f: F): X = x("for", f)
infix fun X.force(f: F): X = x("force", f)
infix fun X.forced(f: F): X = x("forced", f)
infix fun X.foreground(f: F): X = x("foreground", f)
infix fun X.forget(f: F): X = x("forget", f)
infix fun X.form(f: F): X = x("form", f)
infix fun X.found(f: F): X = x("found", f)
infix fun X.four(f: F): X = x("four", f)
infix fun X.fourth(f: F): X = x("fourth", f)
infix fun X.fragment(f: F): X = x("fragment", f)
infix fun X.frame(f: F): X = x("frame", f)
infix fun X.free(f: F): X = x("free", f)
infix fun X.freeze(f: F): X = x("freeze", f)
infix fun X.frequency(f: F): X = x("frequency", f)
infix fun X.from(f: F): X = x("from", f)
infix fun X.frozen(f: F): X = x("frozen", f)
infix fun X.full(f: F): X = x("full", f)
infix fun X.fully(f: F): X = x("fully", f)
infix fun X.fun_(f: F): X = x("fun", f)
infix fun X.func(f: F): X = x("func", f)
infix fun X.function(f: F): X = x("function", f)
infix fun X.functions(f: F): X = x("functions", f)
infix fun X.functor(f: F): X = x("functor", f)
infix fun X.future(f: F): X = x("future", f)
infix fun X.futures(f: F): X = x("futures", f)
infix fun X.g(f: F): X = x("g", f)
infix fun X.game(f: F): X = x("game", f)
infix fun X.gave(f: F): X = x("gave", f)
infix fun X.gen(f: F): X = x("gen", f)
infix fun X.generic(f: F): X = x("generic", f)
infix fun X.generics(f: F): X = x("generics", f)
infix fun X.get(f: F): X = x("get", f)
infix fun X.gets(f: F): X = x("gets", f)
infix fun X.getting(f: F): X = x("getting", f)
infix fun X.give(f: F): X = x("give", f)
infix fun X.given(f: F): X = x("given", f)
infix fun X.gives(f: F): X = x("gives", f)
infix fun X.giving(f: F): X = x("giving", f)
infix fun X.global(f: F): X = x("global", f)
infix fun X.glyph(f: F): X = x("glyph", f)
infix fun X.google(f: F): X = x("google", f)
infix fun X.gray(f: F): X = x("gray", f)
infix fun X.green(f: F): X = x("green", f)
infix fun X.grey(f: F): X = x("grey", f)
infix fun X.grid(f: F): X = x("grid", f)
infix fun X.h(f: F): X = x("h", f)
infix fun X.h1(f: F): X = x("h1", f)
infix fun X.h2(f: F): X = x("h2", f)
infix fun X.h3(f: F): X = x("h3", f)
infix fun X.h4(f: F): X = x("h4", f)
infix fun X.h5(f: F): X = x("h5", f)
infix fun X.h6(f: F): X = x("h6", f)
infix fun X.hack(f: F): X = x("hack", f)
infix fun X.hacker(f: F): X = x("hacker", f)
infix fun X.handle(f: F): X = x("handle", f)
infix fun X.has(f: F): X = x("has", f)
infix fun X.hash(f: F): X = x("hash", f)
infix fun X.hashes(f: F): X = x("hashes", f)
infix fun X.haskell(f: F): X = x("haskell", f)
infix fun X.haxe(f: F): X = x("haxe", f)
infix fun X.head(f: F): X = x("head", f)
infix fun X.header(f: F): X = x("header", f)
infix fun X.heap(f: F): X = x("heap", f)
infix fun X.height(f: F): X = x("height", f)
infix fun X.heights(f: F): X = x("heights", f)
infix fun X.hi(f: F): X = x("hi", f)
infix fun X.high(f: F): X = x("high", f)
infix fun X.hint(f: F): X = x("hint", f)
infix fun X.holder(f: F): X = x("holder", f)
infix fun X.horizontal(f: F): X = x("horizontal", f)
infix fun X.horizontally(f: F): X = x("horizontally", f)
infix fun X.host(f: F): X = x("host", f)
infix fun X.hour(f: F): X = x("hour", f)
infix fun X.href(f: F): X = x("href", f)
infix fun X.html(f: F): X = x("html", f)
infix fun X.http(f: F): X = x("http", f)
infix fun X.husband(f: F): X = x("husband", f)
infix fun X.hx(f: F): X = x("hx", f)
infix fun X.i(f: F): X = x("i", f)
infix fun X.icon(f: F): X = x("icon", f)
infix fun X.identifier(f: F): X = x("identifier", f)
infix fun X.identifiers(f: F): X = x("identifiers", f)
infix fun X.if_(f: F): X = x("if", f)
infix fun X.immediate(f: F): X = x("immediate", f)
infix fun X.immutable(f: F): X = x("immutable", f)
infix fun X.impl(f: F): X = x("impl", f)
infix fun X.implement(f: F): X = x("implement", f)
infix fun X.implements(f: F): X = x("implements", f)
infix fun X.import(f: F): X = x("import", f)
infix fun X.in_(f: F): X = x("in", f)
infix fun X.inbpm(f: F): X = x("inbpm", f)
infix fun X.increment(f: F): X = x("increment", f)
infix fun X.indent(f: F): X = x("indent", f)
infix fun X.index(f: F): X = x("index", f)
infix fun X.infinite(f: F): X = x("infinite", f)
infix fun X.info(f: F): X = x("info", f)
infix fun X.inherit(f: F): X = x("inherit", f)
infix fun X.init(f: F): X = x("init", f)
infix fun X.initial(f: F): X = x("initial", f)
infix fun X.initializer(f: F): X = x("initializer", f)
infix fun X.inline(f: F): X = x("inline", f)
infix fun X.input(f: F): X = x("input", f)
infix fun X.insert(f: F): X = x("insert", f)
infix fun X.instance(f: F): X = x("instance", f)
infix fun X.instrument(f: F): X = x("instrument", f)
infix fun X.instruments(f: F): X = x("instruments", f)
infix fun X.i1(f: F): X = x("i1", f)
infix fun X.i2(f: F): X = x("i2", f)
infix fun X.i4(f: F): X = x("i4", f)
infix fun X.i8(f: F): X = x("i8", f)
infix fun X.i16(f: F): X = x("i16", f)
infix fun X.i32(f: F): X = x("i32", f)
infix fun X.i64(f: F): X = x("i64", f)
infix fun X.image(f: F): X = x("image", f)
infix fun X.int(f: F): X = x("int", f)
infix fun X.int16(f: F): X = x("int16", f)
infix fun X.int32(f: F): X = x("int32", f)
infix fun X.int64(f: F): X = x("int64", f)
infix fun X.int8(f: F): X = x("int8", f)
infix fun X.integer(f: F): X = x("integer", f)
infix fun X.integers(f: F): X = x("integers", f)
infix fun X.integral(f: F): X = x("integral", f)
infix fun X.intent(f: F): X = x("intent", f)
infix fun X.intercept(f: F): X = x("intercept", f)
infix fun X.interface_(f: F): X = x("interface", f)
infix fun X.intern(f: F): X = x("intern", f)
infix fun X.interrupt(f: F): X = x("interrupt", f)
infix fun X.inventory(f: F): X = x("inventory", f)
infix fun X.invoke(f: F): X = x("invoke", f)
infix fun X.ios(f: F): X = x("ios", f)
infix fun X.ipad(f: F): X = x("ipad", f)
infix fun X.iphone(f: F): X = x("iphone", f)
infix fun X.is_(f: F): X = x("is", f)
infix fun X.it(f: F): X = x("it", f)
infix fun X.item(f: F): X = x("item", f)
infix fun X.iterable(f: F): X = x("iterable", f)
infix fun X.iterables(f: F): X = x("iterables", f)
infix fun X.iteratively(f: F): X = x("iteratively", f)
infix fun X.iterator(f: F): X = x("iterator", f)
infix fun X.iterators(f: F): X = x("iterators", f)
infix fun X.itself(f: F): X = x("itself", f)
infix fun X.j(f: F): X = x("j", f)
infix fun X.jam(f: F): X = x("jam", f)
infix fun X.jar(f: F): X = x("jar", f)
infix fun X.java(f: F): X = x("java", f)
infix fun X.javascript(f: F): X = x("javascript", f)
infix fun X.join(f: F): X = x("join", f)
infix fun X.js(f: F): X = x("js", f)
infix fun X.jump(f: F): X = x("jump", f)
infix fun X.just(f: F): X = x("just", f)
infix fun X.k(f: F): X = x("k", f)
infix fun X.key(f: F): X = x("key", f)
infix fun X.keyboard(f: F): X = x("keyboard", f)
infix fun X.keyword(f: F): X = x("keyword", f)
infix fun X.kick(f: F): X = x("kick", f)
infix fun X.kotlin(f: F): X = x("kotlin", f)
infix fun X.l(f: F): X = x("l", f)
infix fun X.label(f: F): X = x("label", f)
infix fun X.lambda(f: F): X = x("lambda", f)
infix fun X.lang(f: F): X = x("lang", f)
infix fun X.last(f: F): X = x("last", f)
infix fun X.latch(f: F): X = x("latch", f)
infix fun X.lazily(f: F): X = x("lazily", f)
infix fun X.lazy_(f: F): X = x("lazy", f)
infix fun X.left(f: F): X = x("left", f)
infix fun X.len(f: F): X = x("len", f)
infix fun X.length(f: F): X = x("length", f)
infix fun X.lengths(f: F): X = x("lengths", f)
infix fun X.leo(f: F): X = x("leo", f)
infix fun X.leonardo(f: F): X = x("leonardo", f)
infix fun X.leonize(f: F): X = x("leonize", f)
infix fun X.leonized(f: F): X = x("leonized", f)
infix fun X.leonizer(f: F): X = x("leonizer", f)
infix fun X.letter(f: F): X = x("letter", f)
infix fun X.lhs(f: F): X = x("lhs", f)
infix fun X.lib(f: F): X = x("lib", f)
infix fun X.library(f: F): X = x("library", f)
infix fun X.light(f: F): X = x("light", f)
infix fun X.limit(f: F): X = x("limit", f)
infix fun X.limited(f: F): X = x("limited", f)
infix fun X.line(f: F): X = x("line", f)
infix fun X.lines(f: F): X = x("lines", f)
infix fun X.link(f: F): X = x("link", f)
infix fun X.linked(f: F): X = x("linked", f)
infix fun X.list(f: F): X = x("list", f)
infix fun X.listener(f: F): X = x("listener", f)
infix fun X.lists(f: F): X = x("lists", f)
infix fun X.literal(f: F): X = x("literal", f)
infix fun X.lo(f: F): X = x("lo", f)
infix fun X.load(f: F): X = x("load", f)
infix fun X.loaded(f: F): X = x("loaded", f)
infix fun X.loader(f: F): X = x("loader", f)
infix fun X.loading(f: F): X = x("loading", f)
infix fun X.lock(f: F): X = x("lock", f)
infix fun X.log(f: F): X = x("log", f)
infix fun X.login(f: F): X = x("login", f)
infix fun X.logo(f: F): X = x("logo", f)
infix fun X.logout(f: F): X = x("logout", f)
infix fun X.lol(f: F): X = x("lol", f)
infix fun X.long(f: F): X = x("long", f)
infix fun X.look(f: F): X = x("look", f)
infix fun X.lookup(f: F): X = x("lookup", f)
infix fun X.loop(f: F): X = x("loop", f)
infix fun X.lost(f: F): X = x("lost", f)
infix fun X.low(f: F): X = x("low", f)
infix fun X.lower(f: F): X = x("lower", f)
infix fun X.ludum(f: F): X = x("ludum", f)
infix fun X.ludumdare(f: F): X = x("ludumdare", f)
infix fun X.m(f: F): X = x("m", f)
infix fun X.mac(f: F): X = x("mac", f)
infix fun X.macos(f: F): X = x("macos", f)
infix fun X.macro(f: F): X = x("macro", f)
infix fun X.magenta(f: F): X = x("magenta", f)
infix fun X.mail(f: F): X = x("mail", f)
infix fun X.main(f: F): X = x("main", f)
infix fun X.make(f: F): X = x("make", f)
infix fun X.male(f: F): X = x("male", f)
infix fun X.manager(f: F): X = x("manager", f)
infix fun X.map(f: F): X = x("map", f)
infix fun X.mapping(f: F): X = x("mapping", f)
infix fun X.maps(f: F): X = x("maps", f)
infix fun X.mapt(f: F): X = x("mapt", f)
infix fun X.margin(f: F): X = x("margin", f)
infix fun X.marriage(f: F): X = x("marriage", f)
infix fun X.match(f: F): X = x("match", f)
infix fun X.matcher(f: F): X = x("matcher", f)
infix fun X.matches(f: F): X = x("matches", f)
infix fun X.matching(f: F): X = x("matching", f)
infix fun X.math(f: F): X = x("math", f)
infix fun X.max(f: F): X = x("max", f)
infix fun X.maybe(f: F): X = x("maybe", f)
infix fun X.measure(f: F): X = x("measure", f)
infix fun X.melody(f: F): X = x("melody", f)
infix fun X.mem(f: F): X = x("mem", f)
infix fun X.member(f: F): X = x("member", f)
infix fun X.members(f: F): X = x("members", f)
infix fun X.membership(f: F): X = x("membership", f)
infix fun X.memory(f: F): X = x("memory", f)
infix fun X.merger(f: F): X = x("merger", f)
infix fun X.message(f: F): X = x("message", f)
infix fun X.meta(f: F): X = x("meta", f)
infix fun X.method(f: F): X = x("method", f)
infix fun X.methods(f: F): X = x("methods", f)
infix fun X.metrics(f: F): X = x("metrics", f)
infix fun X.micapolos(f: F): X = x("micapolos", f)
infix fun X.middle(f: F): X = x("middle", f)
infix fun X.millis(f: F): X = x("millis", f)
infix fun X.min(f: F): X = x("min", f)
infix fun X.minus(f: F): X = x("minus", f)
infix fun X.minute(f: F): X = x("minute", f)
infix fun X.miss(f: F): X = x("miss", f)
infix fun X.missing(f: F): X = x("missing", f)
infix fun X.mod(f: F): X = x("mod", f)
infix fun X.mode(f: F): X = x("mode", f)
infix fun X.modifier(f: F): X = x("modifier", f)
infix fun X.modifiers(f: F): X = x("modifiers", f)
infix fun X.module(f: F): X = x("module", f)
infix fun X.modulo(f: F): X = x("modulo", f)
infix fun X.monad(f: F): X = x("monad", f)
infix fun X.month(f: F): X = x("month", f)
infix fun X.more(f: F): X = x("more", f)
infix fun X.mother(f: F): X = x("mother", f)
infix fun X.motion(f: F): X = x("motion", f)
infix fun X.mouse(f: F): X = x("mouse", f)
infix fun X.move(f: F): X = x("move", f)
infix fun X.mul(f: F): X = x("mul", f)
infix fun X.multiply(f: F): X = x("multiply", f)
infix fun X.mutable(f: F): X = x("mutable", f)
infix fun X.my(f: F): X = x("my", f)
infix fun X.n(f: F): X = x("n", f)
infix fun X.name(f: F): X = x("name", f)
infix fun X.named(f: F): X = x("named", f)
infix fun X.names(f: F): X = x("names", f)
infix fun X.nand(f: F): X = x("nand", f)
infix fun X.native(f: F): X = x("native", f)
infix fun X.negate(f: F): X = x("negate", f)
infix fun X.new(f: F): X = x("new", f)
infix fun X.newline(f: F): X = x("newline", f)
infix fun X.next(f: F): X = x("next", f)
infix fun X.night(f: F): X = x("night", f)
infix fun X.nil(f: F): X = x("nil", f)
infix fun X.nine(f: F): X = x("nine", f)
infix fun X.nineth(f: F): X = x("nineth", f)
infix fun X.no(f: F): X = x("no", f)
infix fun X.node(f: F): X = x("node", f)
infix fun X.non(f: F): X = x("non", f)
infix fun X.none(f: F): X = x("none", f)
infix fun X.nor(f: F): X = x("nor", f)
infix fun X.normalize(f: F): X = x("normalize", f)
infix fun X.normalization(f: F): X = x("normalization", f)
infix fun X.not(f: F): X = x("not", f)
infix fun X.note(f: F): X = x("note", f)
infix fun X.notes(f: F): X = x("notes", f)
infix fun X.nothing(f: F): X = x("nothing", f)
infix fun X.now(f: F): X = x("now", f)
infix fun X.null_(f: F): X = x("null", f)
infix fun X.nullable(f: F): X = x("nullable", f)
infix fun X.number(f: F): X = x("number", f)
infix fun X.numbers(f: F): X = x("numbers", f)
infix fun X.o(f: F): X = x("o", f)
infix fun X.obj(f: F): X = x("obj", f)
infix fun X.object_(f: F): X = x("object", f)
infix fun X.objects(f: F): X = x("objects", f)
infix fun X.of(f: F): X = x("of", f)
infix fun X.off(f: F): X = x("off", f)
infix fun X.office(f: F): X = x("office", f)
infix fun X.offset(f: F): X = x("offset", f)
infix fun X.ofib(f: F): X = x("ofib", f)
infix fun X.ok(f: F): X = x("ok", f)
infix fun X.on(f: F): X = x("on", f)
infix fun X.one(f: F): X = x("one", f)
infix fun X.only(f: F): X = x("only", f)
infix fun X.op(f: F): X = x("op", f)
infix fun X.open(f: F): X = x("open", f)
infix fun X.operation(f: F): X = x("operation", f)
infix fun X.operator(f: F): X = x("operator", f)
infix fun X.option(f: F): X = x("option", f)
infix fun X.optional(f: F): X = x("optional", f)
infix fun X.optionals(f: F): X = x("optionals", f)
infix fun X.or(f: F): X = x("or", f)
infix fun X.orange(f: F): X = x("orange", f)
infix fun X.order(f: F): X = x("order", f)
infix fun X.ordinal(f: F): X = x("ordinal", f)
infix fun X.org(f: F): X = x("org", f)
infix fun X.original(f: F): X = x("original", f)
infix fun X.otherwise(f: F): X = x("otherwise", f)
infix fun X.out(f: F): X = x("out", f)
infix fun X.outline(f: F): X = x("outline", f)
infix fun X.output(f: F): X = x("output", f)
infix fun X.oval(f: F): X = x("oval", f)
infix fun X.over(f: F): X = x("over", f)
infix fun X.overflow(f: F): X = x("overflow", f)
infix fun X.owner(f: F): X = x("owner", f)
infix fun X.p(f: F): X = x("p", f)
infix fun X.package_(f: F): X = x("package", f)
infix fun X.packages(f: F): X = x("packages", f)
infix fun X.page(f: F): X = x("page", f)
infix fun X.paint(f: F): X = x("paint", f)
infix fun X.pair(f: F): X = x("pair", f)
infix fun X.pane(f: F): X = x("pane", f)
infix fun X.param(f: F): X = x("param", f)
infix fun X.parameter(f: F): X = x("parameter", f)
infix fun X.parameters(f: F): X = x("parameters", f)
infix fun X.params(f: F): X = x("params", f)
infix fun X.parent(f: F): X = x("parent", f)
infix fun X.parentheses(f: F): X = x("parentheses", f)
infix fun X.parse(f: F): X = x("parse", f)
infix fun X.parser(f: F): X = x("parser", f)
infix fun X.pass(f: F): X = x("pass", f)
infix fun X.password(f: F): X = x("password", f)
infix fun X.paste(f: F): X = x("paste", f)
infix fun X.path(f: F): X = x("path", f)
infix fun X.pattern(f: F): X = x("pattern", f)
infix fun X.pause(f: F): X = x("pause", f)
infix fun X.payload(f: F): X = x("payload", f)
infix fun X.pc(f: F): X = x("pc", f)
infix fun X.percent(f: F): X = x("percent", f)
infix fun X.period(f: F): X = x("period", f)
infix fun X.person(f: F): X = x("person", f)
infix fun X.phase(f: F): X = x("phase", f)
infix fun X.phone(f: F): X = x("phone", f)
infix fun X.pi(f: F): X = x("pi", f)
infix fun X.pin(f: F): X = x("pin", f)
infix fun X.ping(f: F): X = x("ping", f)
infix fun X.pink(f: F): X = x("pink", f)
infix fun X.pins(f: F): X = x("pins", f)
infix fun X.pixel(f: F): X = x("pixel", f)
infix fun X.pkg(f: F): X = x("pkg", f)
infix fun X.plain(f: F): X = x("plain", f)
infix fun X.play(f: F): X = x("play", f)
infix fun X.plus(f: F): X = x("plus", f)
infix fun X.pm(f: F): X = x("pm", f)
infix fun X.point(f: F): X = x("point", f)
infix fun X.pong(f: F): X = x("pong", f)
infix fun X.pop(f: F): X = x("pop", f)
infix fun X.port(f: F): X = x("port", f)
infix fun X.position(f: F): X = x("position", f)
infix fun X.possible(f: F): X = x("possible", f)
infix fun X.post(f: F): X = x("post", f)
infix fun X.ppq(f: F): X = x("ppq", f)
infix fun X.predecessor(f: F): X = x("predecessor", f)
infix fun X.prefix(f: F): X = x("prefix", f)
infix fun X.prelude(f: F): X = x("prelude", f)
infix fun X.preprocess(f: F): X = x("preprocess", f)
infix fun X.preprocessor(f: F): X = x("preprocessor", f)
infix fun X.present(f: F): X = x("present", f)
infix fun X.prev(f: F): X = x("prev", f)
infix fun X.previous(f: F): X = x("previous", f)
infix fun X.primitive(f: F): X = x("primitive", f)
infix fun X.print(f: F): X = x("print", f)
infix fun X.printed(f: F): X = x("printed", f)
infix fun X.printer(f: F): X = x("printer", f)
infix fun X.printing(f: F): X = x("printing", f)
infix fun X.println(f: F): X = x("println", f)
infix fun X.private(f: F): X = x("private", f)
infix fun X.process(f: F): X = x("process", f)
infix fun X.processed(f: F): X = x("processed", f)
infix fun X.producer(f: F): X = x("producer", f)
infix fun X.product(f: F): X = x("product", f)
infix fun X.program(f: F): X = x("program", f)
infix fun X.property(f: F): X = x("property", f)
infix fun X.protected(f: F): X = x("protected", f)
infix fun X.protocol(f: F): X = x("protocol", f)
infix fun X.public(f: F): X = x("public", f)
infix fun X.pull(f: F): X = x("pull", f)
infix fun X.push(f: F): X = x("push", f)
infix fun X.pushed(f: F): X = x("pushed", f)
infix fun X.put(f: F): X = x("put", f)
infix fun X.q(f: F): X = x("q", f)
infix fun X.query(f: F): X = x("query", f)
infix fun X.queue(f: F): X = x("queue", f)
infix fun X.quicksort(f: F): X = x("quicksort", f)
infix fun X.quote(f: F): X = x("quote", f)
infix fun X.quoted(f: F): X = x("quoted", f)
infix fun X.r(f: F): X = x("r", f)
infix fun X.radians(f: F): X = x("radians", f)
infix fun X.radius(f: F): X = x("radius", f)
infix fun X.random(f: F): X = x("random", f)
infix fun X.read(f: F): X = x("read", f)
infix fun X.reader(f: F): X = x("reader", f)
infix fun X.reading(f: F): X = x("reading", f)
infix fun X.readonly(f: F): X = x("readonly", f)
infix fun X.readutf(f: F): X = x("readutf", f)
infix fun X.recover(f: F): X = x("recover", f)
infix fun X.rect(f: F): X = x("rect", f)
infix fun X.rectangle(f: F): X = x("rectangle", f)
infix fun X.recurse(f: F): X = x("recurse", f)
infix fun X.recursing(f: F): X = x("recursing", f)
infix fun X.recursion(f: F): X = x("recursion", f)
infix fun X.recursive(f: F): X = x("recursive", f)
infix fun X.recursively(f: F): X = x("recursively", f)
infix fun X.red(f: F): X = x("red", f)
infix fun X.redirect(f: F): X = x("redirect", f)
infix fun X.ref(f: F): X = x("ref", f)
infix fun X.reference(f: F): X = x("reference", f)
infix fun X.refl(f: F): X = x("refl", f)
infix fun X.reflect(f: F): X = x("reflect", f)
infix fun X.reflection(f: F): X = x("reflection", f)
infix fun X.regex(f: F): X = x("regex", f)
infix fun X.regular(f: F): X = x("regular", f)
infix fun X.remainder(f: F): X = x("remainder", f)
infix fun X.remove(f: F): X = x("remove", f)
infix fun X.render(f: F): X = x("render", f)
infix fun X.rendering(f: F): X = x("rendering", f)
infix fun X.repeat(f: F): X = x("repeat", f)
infix fun X.repeating(f: F): X = x("repeating", f)
infix fun X.replace(f: F): X = x("replace", f)
infix fun X.required(f: F): X = x("required", f)
infix fun X.reset(f: F): X = x("reset", f)
infix fun X.resolution(f: F): X = x("resolution", f)
infix fun X.resolve(f: F): X = x("resolve", f)
infix fun X.resolved(f: F): X = x("resolved", f)
infix fun X.resolver(f: F): X = x("resolver", f)
infix fun X.resource(f: F): X = x("resource", f)
infix fun X.result(f: F): X = x("result", f)
infix fun X.resume(f: F): X = x("resume", f)
infix fun X.resumed(f: F): X = x("resumed", f)
infix fun X.ret(f: F): X = x("ret", f)
infix fun X.reti(f: F): X = x("reti", f)
infix fun X.return_(f: F): X = x("return", f)
infix fun X.returns(f: F): X = x("returns", f)
infix fun X.reverse(f: F): X = x("reverse", f)
infix fun X.rgb(f: F): X = x("rgb", f)
infix fun X.rgba(f: F): X = x("rgba", f)
infix fun X.rhs(f: F): X = x("rhs", f)
infix fun X.right(f: F): X = x("right", f)
infix fun X.root(f: F): X = x("root", f)
infix fun X.rotate(f: F): X = x("rotate", f)
infix fun X.round(f: F): X = x("round", f)
infix fun X.row(f: F): X = x("row", f)
infix fun X.rows(f: F): X = x("rows", f)
infix fun X.rule(f: F): X = x("rule", f)
infix fun X.run(f: F): X = x("run", f)
infix fun X.running(f: F): X = x("running", f)
infix fun X.runtime(f: F): X = x("runtime", f)
infix fun X.s(f: F): X = x("s", f)
infix fun X.save(f: F): X = x("save", f)
infix fun X.sawtooth(f: F): X = x("sawtooth", f)
infix fun X.say(f: F): X = x("say", f)
infix fun X.scale(f: F): X = x("scale", f)
infix fun X.scheme(f: F): X = x("scheme", f)
infix fun X.scope(f: F): X = x("scope", f)
infix fun X.scoped(f: F): X = x("scoped", f)
infix fun X.scopes(f: F): X = x("scopes", f)
infix fun X.screen(f: F): X = x("screen", f)
infix fun X.script(f: F): X = x("script", f)
infix fun X.search(f: F): X = x("search", f)
infix fun X.second(f: F): X = x("second", f)
infix fun X.select(f: F): X = x("select", f)
infix fun X.selector(f: F): X = x("selector", f)
infix fun X.self(f: F): X = x("self", f)
infix fun X.semicolon(f: F): X = x("semicolon", f)
infix fun X.sentence(f: F): X = x("sentence", f)
infix fun X.sentinel(f: F): X = x("sentinel", f)
infix fun X.separated(f: F): X = x("separated", f)
infix fun X.separator(f: F): X = x("separator", f)
infix fun X.sequence(f: F): X = x("sequence", f)
infix fun X.sequencer(f: F): X = x("sequencer", f)
infix fun X.serial(f: F): X = x("serial", f)
infix fun X.server(f: F): X = x("server", f)
infix fun X.set(f: F): X = x("set", f)
infix fun X.sets(f: F): X = x("sets", f)
infix fun X.seven(f: F): X = x("seven", f)
infix fun X.seventh(f: F): X = x("seventh", f)
infix fun X.sex(f: F): X = x("sex", f)
infix fun X.shape(f: F): X = x("shape", f)
infix fun X.shapes(f: F): X = x("shapes", f)
infix fun X.shift(f: F): X = x("shift", f)
infix fun X.short(f: F): X = x("short", f)
infix fun X.shortquote(f: F): X = x("shortquote", f)
infix fun X.should(f: F): X = x("should", f)
infix fun X.show(f: F): X = x("show", f)
infix fun X.shutdown(f: F): X = x("shutdown", f)
infix fun X.side(f: F): X = x("side", f)
infix fun X.simple(f: F): X = x("simple", f)
infix fun X.sin(f: F): X = x("sin", f)
infix fun X.sine(f: F): X = x("sine", f)
infix fun X.single(f: F): X = x("single", f)
infix fun X.singleton(f: F): X = x("singleton", f)
infix fun X.singly(f: F): X = x("singly", f)
infix fun X.sinh(f: F): X = x("sinh", f)
infix fun X.sink(f: F): X = x("sink", f)
infix fun X.sinks(f: F): X = x("sinks", f)
infix fun X.sinus(f: F): X = x("sinus", f)
infix fun X.six(f: F): X = x("six", f)
infix fun X.sixth(f: F): X = x("sixth", f)
infix fun X.size(f: F): X = x("size", f)
infix fun X.skip(f: F): X = x("skip", f)
infix fun X.slash(f: F): X = x("slash", f)
infix fun X.sleep(f: F): X = x("sleep", f)
infix fun X.slice(f: F): X = x("slice", f)
infix fun X.sliding(f: F): X = x("sliding", f)
infix fun X.slow(f: F): X = x("slow", f)
infix fun X.some(f: F): X = x("some", f)
infix fun X.sort(f: F): X = x("sort", f)
infix fun X.source(f: F): X = x("source", f)
infix fun X.space(f: F): X = x("space", f)
infix fun X.span(f: F): X = x("span", f)
infix fun X.spanning(f: F): X = x("spanning", f)
infix fun X.splice(f: F): X = x("splice", f)
infix fun X.split(f: F): X = x("split", f)
infix fun X.spouse(f: F): X = x("spouse", f)
infix fun X.sqrt(f: F): X = x("sqrt", f)
infix fun X.square(f: F): X = x("square", f)
infix fun X.squared(f: F): X = x("squared", f)
infix fun X.sr(f: F): X = x("sr", f)
infix fun X.src(f: F): X = x("src", f)
infix fun X.stack(f: F): X = x("stack", f)
infix fun X.stacks(f: F): X = x("stacks", f)
infix fun X.stand(f: F): X = x("stand", f)
infix fun X.start(f: F): X = x("start", f)
infix fun X.started(f: F): X = x("started", f)
infix fun X.starts(f: F): X = x("starts", f)
infix fun X.state(f: F): X = x("state", f)
infix fun X.statement(f: F): X = x("statement", f)
infix fun X.statements(f: F): X = x("statements", f)
infix fun X.static(f: F): X = x("static", f)
infix fun X.std(f: F): X = x("std", f)
infix fun X.step(f: F): X = x("step", f)
infix fun X.stop(f: F): X = x("stop", f)
infix fun X.stream(f: F): X = x("stream", f)
infix fun X.string(f: F): X = x("string", f)
infix fun X.strings(f: F): X = x("strings", f)
infix fun X.stroke(f: F): X = x("stroke", f)
infix fun X.struct(f: F): X = x("struct", f)
infix fun X.style(f: F): X = x("style", f)
infix fun X.sub(f: F): X = x("sub", f)
infix fun X.subject(f: F): X = x("subject", f)
infix fun X.submit(f: F): X = x("submit", f)
infix fun X.subpackages(f: F): X = x("subpackages", f)
infix fun X.substr(f: F): X = x("substr", f)
infix fun X.substring(f: F): X = x("substring", f)
infix fun X.subtract(f: F): X = x("subtract", f)
infix fun X.successor(f: F): X = x("successor", f)
infix fun X.suffix(f: F): X = x("suffix", f)
infix fun X.sum(f: F): X = x("sum", f)
infix fun X.super_(f: F): X = x("super", f)
infix fun X.superclass(f: F): X = x("superclass", f)
infix fun X.supervisor(f: F): X = x("supervisor", f)
infix fun X.supplier(f: F): X = x("supplier", f)
infix fun X.suppliers(f: F): X = x("suppliers", f)
infix fun X.suppressed(f: F): X = x("suppressed", f)
infix fun X.switch(f: F): X = x("switch", f)
infix fun X.symbol(f: F): X = x("symbol", f)
infix fun X.symbols(f: F): X = x("symbols", f)
infix fun X.syntax(f: F): X = x("syntax", f)
infix fun X.system(f: F): X = x("system", f)
infix fun X.t(f: F): X = x("t", f)
infix fun X.tab(f: F): X = x("tab", f)
infix fun X.tag(f: F): X = x("tag", f)
infix fun X.tail(f: F): X = x("tail", f)
infix fun X.take(f: F): X = x("take", f)
infix fun X.taken(f: F): X = x("taken", f)
infix fun X.takes(f: F): X = x("takes", f)
infix fun X.taking(f: F): X = x("taking", f)
infix fun X.tan(f: F): X = x("tan", f)
infix fun X.tanh(f: F): X = x("tanh", f)
infix fun X.tap(f: F): X = x("tap", f)
infix fun X.target(f: F): X = x("target", f)
infix fun X.temp(f: F): X = x("temp", f)
infix fun X.template(f: F): X = x("template", f)
infix fun X.tempo(f: F): X = x("tempo", f)
infix fun X.tempos(f: F): X = x("tempos", f)
infix fun X.ten(f: F): X = x("ten", f)
infix fun X.tenth(f: F): X = x("tenth", f)
infix fun X.term(f: F): X = x("term", f)
infix fun X.terms(f: F): X = x("terms", f)
infix fun X.test(f: F): X = x("test", f)
infix fun X.testing(f: F): X = x("testing", f)
infix fun X.tests(f: F): X = x("tests", f)
infix fun X.text(f: F): X = x("text", f)
infix fun X.that(f: F): X = x("that", f)
infix fun X.the(f: F): X = x("the", f)
infix fun X.then_(f: F): X = x("then", f)
infix fun X.these(f: F): X = x("these", f)
infix fun X.thing(f: F): X = x("thing", f)
infix fun X.third(f: F): X = x("third", f)
infix fun X.this_(f: F): X = x("this", f)
infix fun X.thread(f: F): X = x("thread", f)
infix fun X.three(f: F): X = x("three", f)
infix fun X.throw_(f: F): X = x("throw", f)
infix fun X.throwable(f: F): X = x("throwable", f)
infix fun X.throws(f: F): X = x("throws", f)
infix fun X.thunk(f: F): X = x("thunk", f)
infix fun X.time(f: F): X = x("time", f)
infix fun X.timeout(f: F): X = x("timeout", f)
infix fun X.times(f: F): X = x("times", f)
infix fun X.timestamp(f: F): X = x("timestamp", f)
infix fun X.to(f: F): X = x("to", f)
infix fun X.token(f: F): X = x("token", f)
infix fun X.top(f: F): X = x("top", f)
infix fun X.touch(f: F): X = x("touch", f)
infix fun X.trace(f: F): X = x("trace", f)
infix fun X.traced(f: F): X = x("traced", f)
infix fun X.track(f: F): X = x("track", f)
infix fun X.transform(f: F): X = x("transform", f)
infix fun X.translate(f: F): X = x("translate", f)
infix fun X.triangle(f: F): X = x("triangle", f)
infix fun X.trigger(f: F): X = x("trigger", f)
infix fun X.true_(f: F): X = x("true", f)
infix fun X.truth(f: F): X = x("truth", f)
infix fun X.tuple(f: F): X = x("tuple", f)
infix fun X.two(f: F): X = x("two", f)
infix fun X.type(f: F): X = x("type", f)
infix fun X.typed(f: F): X = x("typed", f)
infix fun X.types(f: F): X = x("types", f)
infix fun X.u(f: F): X = x("u", f)
infix fun X.uint(f: F): X = x("uint", f)
infix fun X.uint16(f: F): X = x("uint16", f)
infix fun X.uint32(f: F): X = x("uint32", f)
infix fun X.uint64(f: F): X = x("uint64", f)
infix fun X.uint8(f: F): X = x("uint8", f)
infix fun X.unchecked(f: F): X = x("unchecked", f)
infix fun X.undefined(f: F): X = x("undefined", f)
infix fun X.underscorify(f: F): X = x("underscorify", f)
infix fun X.undo(f: F): X = x("undo", f)
infix fun X.unhandled(f: F): X = x("unhandled", f)
infix fun X.unindent(f: F): X = x("unindent", f)
infix fun X.unit(f: F): X = x("unit", f)
infix fun X.unknown(f: F): X = x("unknown", f)
infix fun X.unlimited(f: F): X = x("unlimited", f)
infix fun X.unmodifiable(f: F): X = x("unmodifiable", f)
infix fun X.unquote(f: F): X = x("unquote", f)
infix fun X.unquoted(f: F): X = x("unquoted", f)
infix fun X.unread(f: F): X = x("unread", f)
infix fun X.unresolved(f: F): X = x("unresolved", f)
infix fun X.unsafe(f: F): X = x("unsafe", f)
infix fun X.unsafes(f: F): X = x("unsafes", f)
infix fun X.unshift(f: F): X = x("unshift", f)
infix fun X.unsigned(f: F): X = x("unsigned", f)
infix fun X.update(f: F): X = x("update", f)
infix fun X.upper(f: F): X = x("upper", f)
infix fun X.uri(f: F): X = x("uri", f)
infix fun X.url(f: F): X = x("url", f)
infix fun X.use(f: F): X = x("use", f)
infix fun X.user(f: F): X = x("user", f)
infix fun X.using(f: F): X = x("using", f)
infix fun X.util(f: F): X = x("util", f)
infix fun X.v(f: F): X = x("v", f)
infix fun X.val_(f: F): X = x("val", f)
infix fun X.value(f: F): X = x("value", f)
infix fun X.values(f: F): X = x("values", f)
infix fun X.var_(f: F): X = x("var", f)
infix fun X.variable(f: F): X = x("variable", f)
infix fun X.variables(f: F): X = x("variables", f)
infix fun X.vec(f: F): X = x("vec", f)
infix fun X.vec2(f: F): X = x("vec2", f)
infix fun X.vec3(f: F): X = x("vec3", f)
infix fun X.vec4(f: F): X = x("vec4", f)
infix fun X.vector(f: F): X = x("vector", f)
infix fun X.versionuid(f: F): X = x("versionuid", f)
infix fun X.vertical(f: F): X = x("vertical", f)
infix fun X.vertically(f: F): X = x("vertically", f)
infix fun X.view(f: F): X = x("view", f)
infix fun X.violet(f: F): X = x("violet", f)
infix fun X.visibility(f: F): X = x("visibility", f)
infix fun X.visible(f: F): X = x("visible", f)
infix fun X.visit(f: F): X = x("visit", f)
infix fun X.visitor(f: F): X = x("visitor", f)
infix fun X.void(f: F): X = x("void", f)
infix fun X.volume(f: F): X = x("volume", f)
infix fun X.w(f: F): X = x("w", f)
infix fun X.wait(f: F): X = x("wait", f)
infix fun X.warn(f: F): X = x("warn", f)
infix fun X.warning(f: F): X = x("warning", f)
infix fun X.watch(f: F): X = x("watch", f)
infix fun X.wave(f: F): X = x("wave", f)
infix fun X.weak(f: F): X = x("weak", f)
infix fun X.week(f: F): X = x("week", f)
infix fun X.while_(f: F): X = x("while", f)
infix fun X.white(f: F): X = x("white", f)
infix fun X.widget(f: F): X = x("widget", f)
infix fun X.width(f: F): X = x("width", f)
infix fun X.wife(f: F): X = x("wife", f)
infix fun X.win(f: F): X = x("win", f)
infix fun X.winding(f: F): X = x("winding", f)
infix fun X.window(f: F): X = x("window", f)
infix fun X.wire(f: F): X = x("wire", f)
infix fun X.with(f: F): X = x("with", f)
infix fun X.without(f: F): X = x("without", f)
infix fun X.word(f: F): X = x("word", f)
infix fun X.wrap(f: F): X = x("wrap", f)
infix fun X.write(f: F): X = x("write", f)
infix fun X.writes(f: F): X = x("writes", f)
infix fun X.writing(f: F): X = x("writing", f)
infix fun X.x(f: F): X = x("x", f)
infix fun X.xfib(f: F): X = x("xfib", f)
infix fun X.xor(f: F): X = x("xor", f)
infix fun X.xy(f: F): X = x("xy", f)
infix fun X.xyz(f: F): X = x("xyz", f)
infix fun X.y(f: F): X = x("y", f)
infix fun X.year(f: F): X = x("year", f)
infix fun X.yellow(f: F): X = x("yellow", f)
infix fun X.yes(f: F): X = x("yes", f)
infix fun X.z(f: F): X = x("z", f)
infix fun X.zero(f: F): X = x("zero", f)
infix fun X.zoom(f: F): X = x("zoom", f)

val X.a: X get() = a { this }
val X.above: X get() = above { this }
val X.abs: X get() = abs { this }
val X.absent: X get() = absent { this }
val X.absolute: X get() = absolute { this }
val X.abstract: X get() = abstract { this }
val X.abstraction: X get() = abstraction { this }
val X.accept: X get() = accept { this }
val X.access: X get() = access { this }
val X.accessible: X get() = accessible { this }
val X.acos: X get() = acos { this }
val X.activity: X get() = activity { this }
val X.actual: X get() = actual { this }
val X.add: X get() = add { this }
val X.addr: X get() = addr { this }
val X.address: X get() = address { this }
val X.admin: X get() = admin { this }
val X.after: X get() = after { this }
val X.age: X get() = age { this }
val X.all: X get() = all { this }
val X.alloc: X get() = alloc { this }
val X.allocate: X get() = allocate { this }
val X.alpha: X get() = alpha { this }
val X.always: X get() = always { this }
val X.am: X get() = am { this }
val X.amplitude: X get() = amplitude { this }
val X.anchor: X get() = anchor { this }
val X.and: X get() = and { this }
val X.angle: X get() = angle { this }
val X.animate: X get() = animate { this }
val X.animated: X get() = animated { this }
val X.animation: X get() = animation { this }
val X.anon: X get() = anon { this }
val X.antialias: X get() = antialias { this }
val X.antialiasing: X get() = antialiasing { this }
val X.anticlockwise: X get() = anticlockwise { this }
val X.any: X get() = any { this }
val X.anything: X get() = anything { this }
val X.appearance: X get() = appearance { this }
val X.append: X get() = append { this }
val X.appending: X get() = appending { this }
val X.application: X get() = application { this }
val X.applicative: X get() = applicative { this }
val X.applier: X get() = applier { this }
val X.apply: X get() = apply { this }
val X.approximate: X get() = approximate { this }
val X.arc: X get() = arc { this }
val X.area: X get() = area { this }
val X.arg: X get() = arg { this }
val X.argb: X get() = argb { this }
val X.args: X get() = args { this }
val X.argument: X get() = argument { this }
val X.arguments: X get() = arguments { this }
val X.arity: X get() = arity { this }
val X.arr: X get() = arr { this }
val X.array: X get() = array { this }
val X.arraycopy: X get() = arraycopy { this }
val X.arrow: X get() = arrow { this }
val X.as_: X get() = as_ { this }
val X.asin: X get() = asin { this }
val X.assert: X get() = assert { this }
val X.assignable: X get() = assignable { this }
val X.async: X get() = async { this }
val X.at: X get() = at { this }
val X.atan: X get() = atan { this }
val X.attention: X get() = attention { this }
val X.attr: X get() = attr { this }
val X.attribute: X get() = attribute { this }
val X.audio: X get() = audio { this }
val X.author: X get() = author { this }
val X.authority: X get() = authority { this }
val X.awt: X get() = awt { this }
val X.b: X get() = b { this }
val X.back: X get() = back { this }
val X.background: X get() = background { this }
val X.backslash: X get() = backslash { this }
val X.backtrace: X get() = backtrace { this }
val X.ball: X get() = ball { this }
val X.ban: X get() = ban { this }
val X.base: X get() = base { this }
val X.becomes: X get() = becomes { this }
val X.before: X get() = before { this }
val X.begin: X get() = begin { this }
val X.being: X get() = being { this }
val X.below: X get() = below { this }
val X.big: X get() = big { this }
val X.binary: X get() = binary { this }
val X.bind: X get() = bind { this }
val X.binding: X get() = binding { this }
val X.bindings: X get() = bindings { this }
val X.bit: X get() = bit { this }
val X.black: X get() = black { this }
val X.block: X get() = block { this }
val X.blue: X get() = blue { this }
val X.body: X get() = body { this }
val X.bool: X get() = bool { this }
val X.boolean: X get() = boolean { this }
val X.booleans: X get() = booleans { this }
val X.boost: X get() = boost { this }
val X.bottom: X get() = bottom { this }
val X.bounds: X get() = bounds { this }
val X.bold: X get() = bold { this }
val X.box: X get() = box { this }
val X.bpm: X get() = bpm { this }
val X.branch: X get() = branch { this }
val X.browse: X get() = browse { this }
val X.buf: X get() = buf { this }
val X.buffer: X get() = buffer { this }
val X.build: X get() = build { this }
val X.builder: X get() = builder { this }
val X.by: X get() = by { this }
val X.byte: X get() = byte { this }
val X.bytes: X get() = bytes { this }
val X.c: X get() = c { this }
val X.cache: X get() = cache { this }
val X.call: X get() = call { this }
val X.called: X get() = called { this }
val X.calling: X get() = calling { this }
val X.cancel: X get() = cancel { this }
val X.cancelable: X get() = cancelable { this }
val X.cancelled: X get() = cancelled { this }
val X.canvas: X get() = canvas { this }
val X.cap: X get() = cap { this }
val X.caps: X get() = caps { this }
val X.case: X get() = case { this }
val X.cast: X get() = cast { this }
val X.catching: X get() = catching { this }
val X.cause: X get() = cause { this }
val X.caution: X get() = caution { this }
val X.center: X get() = center { this }
val X.chain: X get() = chain { this }
val X.change: X get() = change { this }
val X.char: X get() = char { this }
val X.character: X get() = character { this }
val X.cheat: X get() = cheat { this }
val X.check: X get() = check { this }
val X.checked: X get() = checked { this }
val X.child: X get() = child { this }
val X.children: X get() = children { this }
val X.choice: X get() = choice { this }
val X.circle: X get() = circle { this }
val X.class_: X get() = class_ { this }
val X.classes: X get() = classes { this }
val X.clear: X get() = clear { this }
val X.click: X get() = click { this }
val X.clip: X get() = clip { this }
val X.clock: X get() = clock { this }
val X.clockwise: X get() = clockwise { this }
val X.clone: X get() = clone { this }
val X.clones: X get() = clones { this }
val X.close: X get() = close { this }
val X.closeable: X get() = closeable { this }
val X.closed: X get() = closed { this }
val X.closure: X get() = closure { this }
val X.code: X get() = code { this }
val X.codeblock: X get() = codeblock { this }
val X.codegen: X get() = codegen { this }
val X.collect: X get() = collect { this }
val X.collecting: X get() = collecting { this }
val X.color: X get() = color { this }
val X.colors: X get() = colors { this }
val X.column: X get() = column { this }
val X.columns: X get() = columns { this }
val X.com: X get() = com { this }
val X.comfort: X get() = comfort { this }
val X.comma: X get() = comma { this }
val X.command: X get() = command { this }
val X.comment: X get() = comment { this }
val X.comments: X get() = comments { this }
val X.commenting: X get() = commenting { this }
val X.common: X get() = common { this }
val X.compact: X get() = compact { this }
val X.compare: X get() = compare { this }
val X.compass: X get() = compass { this }
val X.compile: X get() = compile { this }
val X.compiled: X get() = compiled { this }
val X.compiler: X get() = compiler { this }
val X.component: X get() = component { this }
val X.components: X get() = components { this }
val X.compute: X get() = compute { this }
val X.concat: X get() = concat { this }
val X.condition: X get() = condition { this }
val X.conflicts: X get() = conflicts { this }
val X.connect: X get() = connect { this }
val X.connected: X get() = connected { this }
val X.connection: X get() = connection { this }
val X.connections: X get() = connections { this }
val X.console: X get() = console { this }
val X.const: X get() = const { this }
val X.constant: X get() = constant { this }
val X.constructor: X get() = constructor { this }
val X.constructors: X get() = constructors { this }
val X.constructs: X get() = constructs { this }
val X.constuctor: X get() = constuctor { this }
val X.consumer: X get() = consumer { this }
val X.consumers: X get() = consumers { this }
val X.contain: X get() = contain { this }
val X.contains: X get() = contains { this }
val X.content: X get() = content { this }
val X.context: X get() = context { this }
val X.continuous: X get() = continuous { this }
val X.control: X get() = control { this }
val X.convert: X get() = convert { this }
val X.coord: X get() = coord { this }
val X.coordinate: X get() = coordinate { this }
val X.coordinates: X get() = coordinates { this }
val X.coords: X get() = coords { this }
val X.copies: X get() = copies { this }
val X.copy: X get() = copy { this }
val X.core: X get() = core { this }
val X.cos: X get() = cos { this }
val X.cosh: X get() = cosh { this }
val X.cosinus: X get() = cosinus { this }
val X.count: X get() = count { this }
val X.counter: X get() = counter { this }
val X.cout: X get() = cout { this }
val X.cover: X get() = cover { this }
val X.crash: X get() = crash { this }
val X.create: X get() = create { this }
val X.created: X get() = created { this }
val X.ctor: X get() = ctor { this }
val X.current: X get() = current { this }
val X.curve: X get() = curve { this }
val X.cut: X get() = cut { this }
val X.cyan: X get() = cyan { this }
val X.d: X get() = d { this }
val X.dare: X get() = dare { this }
val X.dark: X get() = dark { this }
val X.data: X get() = data { this }
val X.database: X get() = database { this }
val X.day: X get() = day { this }
val X.debug: X get() = debug { this }
val X.decimal: X get() = decimal { this }
val X.declaration: X get() = declaration { this }
val X.declared: X get() = declared { this }
val X.declaring: X get() = declaring { this }
val X.decrement: X get() = decrement { this }
val X.deepnight: X get() = deepnight { this }
val X.def: X get() = def { this }
val X.default: X get() = default { this }
val X.define: X get() = define { this }
val X.definition: X get() = definition { this }
val X.defined: X get() = defined { this }
val X.degrees: X get() = degrees { this }
val X.delete: X get() = delete { this }
val X.demo: X get() = demo { this }
val X.depth: X get() = depth { this }
val X.derive: X get() = derive { this }
val X.describe: X get() = describe { this }
val X.destroy: X get() = destroy { this }
val X.detector: X get() = detector { this }
val X.dict: X get() = dict { this }
val X.dictionary: X get() = dictionary { this }
val X.did: X get() = did { this }
val X.difference: X get() = difference { this }
val X.digest: X get() = digest { this }
val X.digit: X get() = digit { this }
val X.dimension: X get() = dimension { this }
val X.dimensional: X get() = dimensional { this }
val X.dimensions: X get() = dimensions { this }
val X.direct: X get() = direct { this }
val X.display: X get() = display { this }
val X.div: X get() = div { this }
val X.divide: X get() = divide { this }
val X.divided: X get() = divided { this }
val X.divmod: X get() = divmod { this }
val X.do_: X get() = do_ { this }
val X.document: X get() = document { this }
val X.does: X get() = does { this }
val X.doing: X get() = doing { this }
val X.done: X get() = done { this }
val X.dot: X get() = dot { this }
val X.double: X get() = double { this }
val X.dp: X get() = dp { this }
val X.draw: X get() = draw { this }
val X.drawing: X get() = drawing { this }
val X.ds: X get() = ds { this }
val X.dsl: X get() = dsl { this }
val X.duty: X get() = duty { this }
val X.dynamic: X get() = dynamic { this }
val X.dynamics: X get() = dynamics { this }
val X.e: X get() = e { this }
val X.each: X get() = each { this }
val X.edge: X get() = edge { this }
val X.eight: X get() = eight { this }
val X.eighth: X get() = eighth { this }
val X.either: X get() = either { this }
val X.element: X get() = element { this }
val X.elements: X get() = elements { this }
val X.else_: X get() = else_ { this }
val X.email: X get() = email { this }
val X.empty: X get() = empty { this }
val X.end: X get() = end { this }
val X.ends: X get() = ends { this }
val X.enter: X get() = enter { this }
val X.entries: X get() = entries { this }
val X.entry: X get() = entry { this }
val X.enum: X get() = enum { this }
val X.enums: X get() = enums { this }
val X.eq: X get() = eq { this }
val X.equal: X get() = equal { this }
val X.equals_: X get() = equals_ { this }
val X.equatable: X get() = equatable { this }
val X.error: X get() = error { this }
val X.esc: X get() = esc { this }
val X.escape: X get() = escape { this }
val X.eval: X get() = eval { this }
val X.evaluate: X get() = evaluate { this }
val X.evaluated: X get() = evaluated { this }
val X.evaluator: X get() = evaluator { this }
val X.event: X get() = event { this }
val X.events: X get() = events { this }
val X.exact: X get() = exact { this }
val X.exactly: X get() = exactly { this }
val X.examples: X get() = examples { this }
val X.exception: X get() = exception { this }
val X.exceptions: X get() = exceptions { this }
val X.exclusive: X get() = exclusive { this }
val X.exec: X get() = exec { this }
val X.executable: X get() = executable { this }
val X.execute: X get() = execute { this }
val X.execution: X get() = execution { this }
val X.executor: X get() = executor { this }
val X.exists: X get() = exists { this }
val X.exit: X get() = exit { this }
val X.expand: X get() = expand { this }
val X.expanded: X get() = expanded { this }
val X.expands: X get() = expands { this }
val X.expected: X get() = expected { this }
val X.export: X get() = export { this }
val X.exported: X get() = exported { this }
val X.expression: X get() = expression { this }
val X.ext: X get() = ext { this }
val X.extends: X get() = extends { this }
val X.extractor: X get() = extractor { this }
val X.f: X get() = f { this }
val X.f32: X get() = f32 { this }
val X.f64: X get() = f64 { this }
val X.factory: X get() = factory { this }
val X.fading: X get() = fading { this }
val X.failed: X get() = failed { this }
val X.failures: X get() = failures { this }
val X.false_: X get() = false_ { this }
val X.family: X get() = family { this }
val X.fast: X get() = fast { this }
val X.father: X get() = father { this }
val X.female: X get() = female { this }
val X.fetch: X get() = fetch { this }
val X.fib: X get() = fib { this }
val X.field: X get() = field { this }
val X.fields: X get() = fields { this }
val X.fifth: X get() = fifth { this }
val X.file: X get() = file { this }
val X.files: X get() = files { this }
val X.fill: X get() = fill { this }
val X.filter: X get() = filter { this }
val X.final: X get() = final { this }
val X.finality: X get() = finality { this }
val X.finalizer: X get() = finalizer { this }
val X.find: X get() = find { this }
val X.finite: X get() = finite { this }
val X.first: X get() = first { this }
val X.five: X get() = five { this }
val X.flat: X get() = flat { this }
val X.flip: X get() = flip { this }
val X.float: X get() = float { this }
val X.float32: X get() = float32 { this }
val X.float64: X get() = float64 { this }
val X.floating: X get() = floating { this }
val X.flush: X get() = flush { this }
val X.fn: X get() = fn { this }
val X.fold: X get() = fold { this }
val X.folded: X get() = folded { this }
val X.folder: X get() = folder { this }
val X.font: X get() = font { this }
val X.footer: X get() = footer { this }
val X.for_: X get() = for_ { this }
val X.force: X get() = force { this }
val X.forced: X get() = forced { this }
val X.foreground: X get() = foreground { this }
val X.forget: X get() = forget { this }
val X.form: X get() = form { this }
val X.found: X get() = found { this }
val X.four: X get() = four { this }
val X.fourth: X get() = fourth { this }
val X.fragment: X get() = fragment { this }
val X.frame: X get() = frame { this }
val X.free: X get() = free { this }
val X.freeze: X get() = freeze { this }
val X.frequency: X get() = frequency { this }
val X.from: X get() = from { this }
val X.frozen: X get() = frozen { this }
val X.full: X get() = full { this }
val X.fully: X get() = fully { this }
val X.fun_: X get() = fun_ { this }
val X.func: X get() = func { this }
val X.function: X get() = function { this }
val X.functions: X get() = functions { this }
val X.functor: X get() = functor { this }
val X.future: X get() = future { this }
val X.futures: X get() = futures { this }
val X.g: X get() = g { this }
val X.game: X get() = game { this }
val X.gave: X get() = gave { this }
val X.gen: X get() = gen { this }
val X.generic: X get() = generic { this }
val X.generics: X get() = generics { this }
val X.get: X get() = get { this }
val X.gets: X get() = gets { this }
val X.getting: X get() = getting { this }
val X.give: X get() = give { this }
val X.given: X get() = given { this }
val X.gives: X get() = gives { this }
val X.giving: X get() = giving { this }
val X.global: X get() = global { this }
val X.glyph: X get() = glyph { this }
val X.google: X get() = google { this }
val X.gray: X get() = gray { this }
val X.green: X get() = green { this }
val X.grey: X get() = grey { this }
val X.grid: X get() = grid { this }
val X.h: X get() = h { this }
val X.h1: X get() = h1 { this }
val X.h2: X get() = h2 { this }
val X.h3: X get() = h3 { this }
val X.h4: X get() = h4 { this }
val X.h5: X get() = h5 { this }
val X.h6: X get() = h6 { this }
val X.hack: X get() = hack { this }
val X.hacker: X get() = hacker { this }
val X.handle: X get() = handle { this }
val X.has: X get() = has { this }
val X.hash: X get() = hash { this }
val X.hashes: X get() = hashes { this }
val X.haskell: X get() = haskell { this }
val X.haxe: X get() = haxe { this }
val X.head: X get() = head { this }
val X.header: X get() = header { this }
val X.heap: X get() = heap { this }
val X.height: X get() = height { this }
val X.heights: X get() = heights { this }
val X.hi: X get() = hi { this }
val X.high: X get() = high { this }
val X.hint: X get() = hint { this }
val X.holder: X get() = holder { this }
val X.horizontal: X get() = horizontal { this }
val X.horizontally: X get() = horizontally { this }
val X.host: X get() = host { this }
val X.hour: X get() = hour { this }
val X.href: X get() = href { this }
val X.html: X get() = html { this }
val X.http: X get() = http { this }
val X.husband: X get() = husband { this }
val X.hx: X get() = hx { this }
val X.i: X get() = i { this }
val X.icon: X get() = icon { this }
val X.identifier: X get() = identifier { this }
val X.identifiers: X get() = identifiers { this }
val X.if_: X get() = if_ { this }
val X.immediate: X get() = immediate { this }
val X.immutable: X get() = immutable { this }
val X.impl: X get() = impl { this }
val X.implement: X get() = implement { this }
val X.implements: X get() = implements { this }
val X.import: X get() = import { this }
val X.in_: X get() = in_ { this }
val X.inbpm: X get() = inbpm { this }
val X.increment: X get() = increment { this }
val X.indent: X get() = indent { this }
val X.index: X get() = index { this }
val X.infinite: X get() = infinite { this }
val X.info: X get() = info { this }
val X.inherit: X get() = inherit { this }
val X.init: X get() = init { this }
val X.initial: X get() = initial { this }
val X.initializer: X get() = initializer { this }
val X.inline: X get() = inline { this }
val X.input: X get() = input { this }
val X.insert: X get() = insert { this }
val X.instance: X get() = instance { this }
val X.instrument: X get() = instrument { this }
val X.instruments: X get() = instruments { this }
val X.i1: X get() = i1 { this }
val X.i2: X get() = i2 { this }
val X.i4: X get() = i4 { this }
val X.i8: X get() = i8 { this }
val X.i16: X get() = i16 { this }
val X.i32: X get() = i32 { this }
val X.i64: X get() = i64 { this }
val X.image: X get() = image { this }
val X.int: X get() = int { this }
val X.int16: X get() = int16 { this }
val X.int32: X get() = int32 { this }
val X.int64: X get() = int64 { this }
val X.int8: X get() = int8 { this }
val X.integer: X get() = integer { this }
val X.integers: X get() = integers { this }
val X.integral: X get() = integral { this }
val X.intent: X get() = intent { this }
val X.intercept: X get() = intercept { this }
val X.interface_: X get() = interface_ { this }
val X.intern: X get() = intern { this }
val X.interrupt: X get() = interrupt { this }
val X.inventory: X get() = inventory { this }
val X.invoke: X get() = invoke { this }
val X.ios: X get() = ios { this }
val X.ipad: X get() = ipad { this }
val X.iphone: X get() = iphone { this }
val X.is_: X get() = is_ { this }
val X.it: X get() = it { this }
val X.item: X get() = item { this }
val X.iterable: X get() = iterable { this }
val X.iterables: X get() = iterables { this }
val X.iteratively: X get() = iteratively { this }
val X.iterator: X get() = iterator { this }
val X.iterators: X get() = iterators { this }
val X.itself: X get() = itself { this }
val X.j: X get() = j { this }
val X.jam: X get() = jam { this }
val X.jar: X get() = jar { this }
val X.java: X get() = java { this }
val X.javascript: X get() = javascript { this }
val X.join: X get() = join { this }
val X.js: X get() = js { this }
val X.jump: X get() = jump { this }
val X.just: X get() = just { this }
val X.k: X get() = k { this }
val X.key: X get() = key { this }
val X.keyboard: X get() = keyboard { this }
val X.keyword: X get() = keyword { this }
val X.kick: X get() = kick { this }
val X.kotlin: X get() = kotlin { this }
val X.l: X get() = l { this }
val X.label: X get() = label { this }
val X.lambda: X get() = lambda { this }
val X.lang: X get() = lang { this }
val X.last: X get() = last { this }
val X.latch: X get() = latch { this }
val X.lazily: X get() = lazily { this }
val X.lazy_: X get() = lazy_ { this }
val X.left: X get() = left { this }
val X.len: X get() = len { this }
val X.length: X get() = length { this }
val X.lengths: X get() = lengths { this }
val X.leo: X get() = leo { this }
val X.leonardo: X get() = leonardo { this }
val X.leonize: X get() = leonize { this }
val X.leonized: X get() = leonized { this }
val X.leonizer: X get() = leonizer { this }
val X.letter: X get() = letter { this }
val X.lhs: X get() = lhs { this }
val X.lib: X get() = lib { this }
val X.library: X get() = library { this }
val X.light: X get() = light { this }
val X.limit: X get() = limit { this }
val X.limited: X get() = limited { this }
val X.line: X get() = line { this }
val X.lines: X get() = lines { this }
val X.link: X get() = link { this }
val X.linked: X get() = linked { this }
val X.list: X get() = list { this }
val X.listener: X get() = listener { this }
val X.lists: X get() = lists { this }
val X.literal: X get() = literal { this }
val X.lo: X get() = lo { this }
val X.load: X get() = load { this }
val X.loaded: X get() = loaded { this }
val X.loader: X get() = loader { this }
val X.loading: X get() = loading { this }
val X.lock: X get() = lock { this }
val X.log: X get() = log { this }
val X.login: X get() = login { this }
val X.logo: X get() = logo { this }
val X.logout: X get() = logout { this }
val X.lol: X get() = lol { this }
val X.long: X get() = long { this }
val X.look: X get() = look { this }
val X.lookup: X get() = lookup { this }
val X.loop: X get() = loop { this }
val X.lost: X get() = lost { this }
val X.low: X get() = low { this }
val X.lower: X get() = lower { this }
val X.ludum: X get() = ludum { this }
val X.ludumdare: X get() = ludumdare { this }
val X.m: X get() = m { this }
val X.mac: X get() = mac { this }
val X.macos: X get() = macos { this }
val X.macro: X get() = macro { this }
val X.magenta: X get() = magenta { this }
val X.mail: X get() = mail { this }
val X.main: X get() = main { this }
val X.make: X get() = make { this }
val X.male: X get() = male { this }
val X.manager: X get() = manager { this }
val X.map: X get() = map { this }
val X.mapping: X get() = mapping { this }
val X.maps: X get() = maps { this }
val X.mapt: X get() = mapt { this }
val X.margin: X get() = margin { this }
val X.marriage: X get() = marriage { this }
val X.match: X get() = match { this }
val X.matcher: X get() = matcher { this }
val X.matches: X get() = matches { this }
val X.matching: X get() = matching { this }
val X.math: X get() = math { this }
val X.max: X get() = max { this }
val X.maybe: X get() = maybe { this }
val X.measure: X get() = measure { this }
val X.melody: X get() = melody { this }
val X.mem: X get() = mem { this }
val X.member: X get() = member { this }
val X.members: X get() = members { this }
val X.membership: X get() = membership { this }
val X.memory: X get() = memory { this }
val X.merger: X get() = merger { this }
val X.message: X get() = message { this }
val X.meta: X get() = meta { this }
val X.method: X get() = method { this }
val X.methods: X get() = methods { this }
val X.metrics: X get() = metrics { this }
val X.micapolos: X get() = micapolos { this }
val X.middle: X get() = middle { this }
val X.millis: X get() = millis { this }
val X.min: X get() = min { this }
val X.minus: X get() = minus { this }
val X.minute: X get() = minute { this }
val X.miss: X get() = miss { this }
val X.missing: X get() = missing { this }
val X.mod: X get() = mod { this }
val X.mode: X get() = mode { this }
val X.modifier: X get() = modifier { this }
val X.modifiers: X get() = modifiers { this }
val X.module: X get() = module { this }
val X.modulo: X get() = modulo { this }
val X.monad: X get() = monad { this }
val X.month: X get() = month { this }
val X.more: X get() = more { this }
val X.mother: X get() = mother { this }
val X.motion: X get() = motion { this }
val X.mouse: X get() = mouse { this }
val X.move: X get() = move { this }
val X.mul: X get() = mul { this }
val X.multiply: X get() = multiply { this }
val X.mutable: X get() = mutable { this }
val X.my: X get() = my { this }
val X.n: X get() = n { this }
val X.name: X get() = name { this }
val X.named: X get() = named { this }
val X.names: X get() = names { this }
val X.nand: X get() = nand { this }
val X.native: X get() = native { this }
val X.negate: X get() = negate { this }
val X.new: X get() = new { this }
val X.newline: X get() = newline { this }
val X.next: X get() = next { this }
val X.night: X get() = night { this }
val X.nil: X get() = nil { this }
val X.nine: X get() = nine { this }
val X.nineth: X get() = nineth { this }
val X.no: X get() = no { this }
val X.node: X get() = node { this }
val X.non: X get() = non { this }
val X.none: X get() = none { this }
val X.nor: X get() = nor { this }
val X.normalize: X get() = normalize { this }
val X.normalization: X get() = normalization { this }
val X.not: X get() = not { this }
val X.note: X get() = note { this }
val X.notes: X get() = notes { this }
val X.nothing: X get() = nothing { this }
val X.now: X get() = now { this }
val X.null_: X get() = null_ { this }
val X.nullable: X get() = nullable { this }
val X.number: X get() = number { this }
val X.numbers: X get() = numbers { this }
val X.o: X get() = o { this }
val X.obj: X get() = obj { this }
val X.object_: X get() = object_ { this }
val X.objects: X get() = objects { this }
val X.of: X get() = of { this }
val X.off: X get() = off { this }
val X.office: X get() = office { this }
val X.offset: X get() = offset { this }
val X.ofib: X get() = ofib { this }
val X.ok: X get() = ok { this }
val X.on: X get() = on { this }
val X.one: X get() = one { this }
val X.only: X get() = only { this }
val X.op: X get() = op { this }
val X.open: X get() = open { this }
val X.operation: X get() = operation { this }
val X.operator: X get() = operator { this }
val X.option: X get() = option { this }
val X.optional: X get() = optional { this }
val X.optionals: X get() = optionals { this }
val X.or: X get() = or { this }
val X.orange: X get() = orange { this }
val X.order: X get() = order { this }
val X.ordinal: X get() = ordinal { this }
val X.org: X get() = org { this }
val X.original: X get() = original { this }
val X.otherwise: X get() = otherwise { this }
val X.out: X get() = out { this }
val X.outline: X get() = outline { this }
val X.output: X get() = output { this }
val X.oval: X get() = oval { this }
val X.over: X get() = over { this }
val X.overflow: X get() = overflow { this }
val X.owner: X get() = owner { this }
val X.p: X get() = p { this }
val X.package_: X get() = package_ { this }
val X.packages: X get() = packages { this }
val X.page: X get() = page { this }
val X.paint: X get() = paint { this }
val X.pair: X get() = pair { this }
val X.pane: X get() = pane { this }
val X.param: X get() = param { this }
val X.parameter: X get() = parameter { this }
val X.parameters: X get() = parameters { this }
val X.params: X get() = params { this }
val X.parent: X get() = parent { this }
val X.parentheses: X get() = parentheses { this }
val X.parse: X get() = parse { this }
val X.parser: X get() = parser { this }
val X.pass: X get() = pass { this }
val X.password: X get() = password { this }
val X.paste: X get() = paste { this }
val X.path: X get() = path { this }
val X.pattern: X get() = pattern { this }
val X.pause: X get() = pause { this }
val X.payload: X get() = payload { this }
val X.pc: X get() = pc { this }
val X.percent: X get() = percent { this }
val X.period: X get() = period { this }
val X.person: X get() = person { this }
val X.phase: X get() = phase { this }
val X.phone: X get() = phone { this }
val X.pi: X get() = pi { this }
val X.pin: X get() = pin { this }
val X.ping: X get() = ping { this }
val X.pink: X get() = pink { this }
val X.pins: X get() = pins { this }
val X.pixel: X get() = pixel { this }
val X.pkg: X get() = pkg { this }
val X.plain: X get() = plain { this }
val X.play: X get() = play { this }
val X.plus: X get() = plus { this }
val X.pm: X get() = pm { this }
val X.point: X get() = point { this }
val X.pong: X get() = pong { this }
val X.pop: X get() = pop { this }
val X.port: X get() = port { this }
val X.position: X get() = position { this }
val X.possible: X get() = possible { this }
val X.post: X get() = post { this }
val X.ppq: X get() = ppq { this }
val X.predecessor: X get() = predecessor { this }
val X.prefix: X get() = prefix { this }
val X.prelude: X get() = prelude { this }
val X.preprocess: X get() = preprocess { this }
val X.preprocessor: X get() = preprocessor { this }
val X.present: X get() = present { this }
val X.prev: X get() = prev { this }
val X.previous: X get() = previous { this }
val X.primitive: X get() = primitive { this }
val X.print: X get() = print { this }
val X.printed: X get() = printed { this }
val X.printer: X get() = printer { this }
val X.printing: X get() = printing { this }
val X.println: X get() = println { this }
val X.private: X get() = private { this }
val X.process: X get() = process { this }
val X.processed: X get() = processed { this }
val X.producer: X get() = producer { this }
val X.product: X get() = product { this }
val X.program: X get() = program { this }
val X.property: X get() = property { this }
val X.protected: X get() = protected { this }
val X.protocol: X get() = protocol { this }
val X.public: X get() = public { this }
val X.pull: X get() = pull { this }
val X.push: X get() = push { this }
val X.pushed: X get() = pushed { this }
val X.put: X get() = put { this }
val X.q: X get() = q { this }
val X.query: X get() = query { this }
val X.queue: X get() = queue { this }
val X.quicksort: X get() = quicksort { this }
val X.quote: X get() = quote { this }
val X.quoted: X get() = quoted { this }
val X.r: X get() = r { this }
val X.radians: X get() = radians { this }
val X.radius: X get() = radius { this }
val X.random: X get() = random { this }
val X.read: X get() = read { this }
val X.reader: X get() = reader { this }
val X.reading: X get() = reading { this }
val X.readonly: X get() = readonly { this }
val X.readutf: X get() = readutf { this }
val X.recover: X get() = recover { this }
val X.rect: X get() = rect { this }
val X.rectangle: X get() = rectangle { this }
val X.recurse: X get() = recurse { this }
val X.recursing: X get() = recursing { this }
val X.recursion: X get() = recursion { this }
val X.recursive: X get() = recursive { this }
val X.recursively: X get() = recursively { this }
val X.red: X get() = red { this }
val X.redirect: X get() = redirect { this }
val X.ref: X get() = ref { this }
val X.reference: X get() = reference { this }
val X.refl: X get() = refl { this }
val X.reflect: X get() = reflect { this }
val X.reflection: X get() = reflection { this }
val X.regex: X get() = regex { this }
val X.regular: X get() = regular { this }
val X.remainder: X get() = remainder { this }
val X.remove: X get() = remove { this }
val X.render: X get() = render { this }
val X.rendering: X get() = rendering { this }
val X.repeat: X get() = repeat { this }
val X.repeating: X get() = repeating { this }
val X.replace: X get() = replace { this }
val X.required: X get() = required { this }
val X.reset: X get() = reset { this }
val X.resolution: X get() = resolution { this }
val X.resolve: X get() = resolve { this }
val X.resolved: X get() = resolved { this }
val X.resolver: X get() = resolver { this }
val X.resource: X get() = resource { this }
val X.result: X get() = result { this }
val X.resume: X get() = resume { this }
val X.resumed: X get() = resumed { this }
val X.ret: X get() = ret { this }
val X.reti: X get() = reti { this }
val X.return_: X get() = return_ { this }
val X.returns: X get() = returns { this }
val X.reverse: X get() = reverse { this }
val X.rgb: X get() = rgb { this }
val X.rgba: X get() = rgba { this }
val X.rhs: X get() = rhs { this }
val X.right: X get() = right { this }
val X.root: X get() = root { this }
val X.rotate: X get() = rotate { this }
val X.round: X get() = round { this }
val X.row: X get() = row { this }
val X.rows: X get() = rows { this }
val X.rule: X get() = rule { this }
val X.run: X get() = run { this }
val X.running: X get() = running { this }
val X.runtime: X get() = runtime { this }
val X.s: X get() = s { this }
val X.save: X get() = save { this }
val X.sawtooth: X get() = sawtooth { this }
val X.say: X get() = say { this }
val X.scale: X get() = scale { this }
val X.scheme: X get() = scheme { this }
val X.scope: X get() = scope { this }
val X.scoped: X get() = scoped { this }
val X.scopes: X get() = scopes { this }
val X.screen: X get() = screen { this }
val X.script: X get() = script { this }
val X.search: X get() = search { this }
val X.second: X get() = second { this }
val X.select: X get() = select { this }
val X.selector: X get() = selector { this }
val X.self: X get() = self { this }
val X.semicolon: X get() = semicolon { this }
val X.sentence: X get() = sentence { this }
val X.sentinel: X get() = sentinel { this }
val X.separated: X get() = separated { this }
val X.separator: X get() = separator { this }
val X.sequence: X get() = sequence { this }
val X.sequencer: X get() = sequencer { this }
val X.serial: X get() = serial { this }
val X.server: X get() = server { this }
val X.set: X get() = set { this }
val X.sets: X get() = sets { this }
val X.seven: X get() = seven { this }
val X.seventh: X get() = seventh { this }
val X.sex: X get() = sex { this }
val X.shape: X get() = shape { this }
val X.shapes: X get() = shapes { this }
val X.shift: X get() = shift { this }
val X.short: X get() = short { this }
val X.shortquote: X get() = shortquote { this }
val X.should: X get() = should { this }
val X.show: X get() = show { this }
val X.shutdown: X get() = shutdown { this }
val X.side: X get() = side { this }
val X.simple: X get() = simple { this }
val X.sin: X get() = sin { this }
val X.sine: X get() = sine { this }
val X.single: X get() = single { this }
val X.singleton: X get() = singleton { this }
val X.singly: X get() = singly { this }
val X.sinh: X get() = sinh { this }
val X.sink: X get() = sink { this }
val X.sinks: X get() = sinks { this }
val X.sinus: X get() = sinus { this }
val X.six: X get() = six { this }
val X.sixth: X get() = sixth { this }
val X.size: X get() = size { this }
val X.skip: X get() = skip { this }
val X.slash: X get() = slash { this }
val X.sleep: X get() = sleep { this }
val X.slice: X get() = slice { this }
val X.sliding: X get() = sliding { this }
val X.slow: X get() = slow { this }
val X.some: X get() = some { this }
val X.sort: X get() = sort { this }
val X.source: X get() = source { this }
val X.space: X get() = space { this }
val X.span: X get() = span { this }
val X.spanning: X get() = spanning { this }
val X.splice: X get() = splice { this }
val X.split: X get() = split { this }
val X.spouse: X get() = spouse { this }
val X.sqrt: X get() = sqrt { this }
val X.square: X get() = square { this }
val X.squared: X get() = squared { this }
val X.sr: X get() = sr { this }
val X.src: X get() = src { this }
val X.stack: X get() = stack { this }
val X.stacks: X get() = stacks { this }
val X.stand: X get() = stand { this }
val X.start: X get() = start { this }
val X.started: X get() = started { this }
val X.starts: X get() = starts { this }
val X.state: X get() = state { this }
val X.statement: X get() = statement { this }
val X.statements: X get() = statements { this }
val X.static: X get() = static { this }
val X.std: X get() = std { this }
val X.step: X get() = step { this }
val X.stop: X get() = stop { this }
val X.stream: X get() = stream { this }
val X.string: X get() = string { this }
val X.strings: X get() = strings { this }
val X.stroke: X get() = stroke { this }
val X.struct: X get() = struct { this }
val X.style: X get() = style { this }
val X.sub: X get() = sub { this }
val X.subject: X get() = subject { this }
val X.submit: X get() = submit { this }
val X.subpackages: X get() = subpackages { this }
val X.substr: X get() = substr { this }
val X.substring: X get() = substring { this }
val X.subtract: X get() = subtract { this }
val X.successor: X get() = successor { this }
val X.suffix: X get() = suffix { this }
val X.sum: X get() = sum { this }
val X.super_: X get() = super_ { this }
val X.superclass: X get() = superclass { this }
val X.supervisor: X get() = supervisor { this }
val X.supplier: X get() = supplier { this }
val X.suppliers: X get() = suppliers { this }
val X.suppressed: X get() = suppressed { this }
val X.switch: X get() = switch { this }
val X.symbol: X get() = symbol { this }
val X.symbols: X get() = symbols { this }
val X.syntax: X get() = syntax { this }
val X.system: X get() = system { this }
val X.t: X get() = t { this }
val X.tab: X get() = tab { this }
val X.tag: X get() = tag { this }
val X.tail: X get() = tail { this }
val X.take: X get() = take { this }
val X.taken: X get() = taken { this }
val X.takes: X get() = takes { this }
val X.taking: X get() = taking { this }
val X.tan: X get() = tan { this }
val X.tanh: X get() = tanh { this }
val X.tap: X get() = tap { this }
val X.target: X get() = target { this }
val X.temp: X get() = temp { this }
val X.template: X get() = template { this }
val X.tempo: X get() = tempo { this }
val X.tempos: X get() = tempos { this }
val X.ten: X get() = ten { this }
val X.tenth: X get() = tenth { this }
val X.term: X get() = term { this }
val X.terms: X get() = terms { this }
val X.test: X get() = test { this }
val X.testing: X get() = testing { this }
val X.tests: X get() = tests { this }
val X.text: X get() = text { this }
val X.that: X get() = that { this }
val X.the: X get() = the { this }
val X.then_: X get() = then_ { this }
val X.these: X get() = these { this }
val X.thing: X get() = thing { this }
val X.third: X get() = third { this }
val X.this_: X get() = this_ { this }
val X.thread: X get() = thread { this }
val X.three: X get() = three { this }
val X.throw_: X get() = throw_ { this }
val X.throwable: X get() = throwable { this }
val X.throws: X get() = throws { this }
val X.thunk: X get() = thunk { this }
val X.time: X get() = time { this }
val X.timeout: X get() = timeout { this }
val X.times: X get() = times { this }
val X.timestamp: X get() = timestamp { this }
val X.to: X get() = to { this }
val X.token: X get() = token { this }
val X.top: X get() = top { this }
val X.touch: X get() = touch { this }
val X.trace: X get() = trace { this }
val X.traced: X get() = traced { this }
val X.track: X get() = track { this }
val X.transform: X get() = transform { this }
val X.translate: X get() = translate { this }
val X.triangle: X get() = triangle { this }
val X.trigger: X get() = trigger { this }
val X.true_: X get() = true_ { this }
val X.truth: X get() = truth { this }
val X.tuple: X get() = tuple { this }
val X.two: X get() = two { this }
val X.type: X get() = type { this }
val X.typed: X get() = typed { this }
val X.types: X get() = types { this }
val X.u: X get() = u { this }
val X.uint: X get() = uint { this }
val X.uint16: X get() = uint16 { this }
val X.uint32: X get() = uint32 { this }
val X.uint64: X get() = uint64 { this }
val X.uint8: X get() = uint8 { this }
val X.unchecked: X get() = unchecked { this }
val X.undefined: X get() = undefined { this }
val X.underscorify: X get() = underscorify { this }
val X.undo: X get() = undo { this }
val X.unhandled: X get() = unhandled { this }
val X.unindent: X get() = unindent { this }
val X.unit: X get() = unit { this }
val X.unknown: X get() = unknown { this }
val X.unlimited: X get() = unlimited { this }
val X.unmodifiable: X get() = unmodifiable { this }
val X.unquote: X get() = unquote { this }
val X.unquoted: X get() = unquoted { this }
val X.unread: X get() = unread { this }
val X.unresolved: X get() = unresolved { this }
val X.unsafe: X get() = unsafe { this }
val X.unsafes: X get() = unsafes { this }
val X.unshift: X get() = unshift { this }
val X.unsigned: X get() = unsigned { this }
val X.update: X get() = update { this }
val X.upper: X get() = upper { this }
val X.uri: X get() = uri { this }
val X.url: X get() = url { this }
val X.use: X get() = use { this }
val X.user: X get() = user { this }
val X.using: X get() = using { this }
val X.util: X get() = util { this }
val X.v: X get() = v { this }
val X.val_: X get() = val_ { this }
val X.value: X get() = value { this }
val X.values: X get() = values { this }
val X.var_: X get() = var_ { this }
val X.variable: X get() = variable { this }
val X.variables: X get() = variables { this }
val X.vec: X get() = vec { this }
val X.vec2: X get() = vec2 { this }
val X.vec3: X get() = vec3 { this }
val X.vec4: X get() = vec4 { this }
val X.vector: X get() = vector { this }
val X.versionuid: X get() = versionuid { this }
val X.vertical: X get() = vertical { this }
val X.vertically: X get() = vertically { this }
val X.view: X get() = view { this }
val X.violet: X get() = violet { this }
val X.visibility: X get() = visibility { this }
val X.visible: X get() = visible { this }
val X.visit: X get() = visit { this }
val X.visitor: X get() = visitor { this }
val X.void: X get() = void { this }
val X.volume: X get() = volume { this }
val X.w: X get() = w { this }
val X.wait: X get() = wait { this }
val X.warn: X get() = warn { this }
val X.warning: X get() = warning { this }
val X.watch: X get() = watch { this }
val X.wave: X get() = wave { this }
val X.weak: X get() = weak { this }
val X.week: X get() = week { this }
val X.while_: X get() = while_ { this }
val X.white: X get() = white { this }
val X.widget: X get() = widget { this }
val X.width: X get() = width { this }
val X.wife: X get() = wife { this }
val X.win: X get() = win { this }
val X.winding: X get() = winding { this }
val X.window: X get() = window { this }
val X.wire: X get() = wire { this }
val X.with: X get() = with { this }
val X.without: X get() = without { this }
val X.word: X get() = word { this }
val X.wrap: X get() = wrap { this }
val X.write: X get() = write { this }
val X.writes: X get() = writes { this }
val X.writing: X get() = writing { this }
val X.x: X get() = x { this }
val X.xfib: X get() = xfib { this }
val X.xor: X get() = xor { this }
val X.xy: X get() = xy { this }
val X.xyz: X get() = xyz { this }
val X.y: X get() = y { this }
val X.year: X get() = year { this }
val X.yellow: X get() = yellow { this }
val X.yes: X get() = yes { this }
val X.z: X get() = z { this }
val X.zero: X get() = zero { this }
val X.zoom: X get() = zoom { this }