package leo.binary

data class Mem1(val at0: Int, val at1: Int)
data class Mem2(val at0: Mem1, val at1: Mem1)
data class Mem3(val at0: Mem2, val at1: Mem2)
data class Mem4(val at0: Mem3, val at1: Mem3)
data class Mem5(val at0: Mem4, val at1: Mem4)
data class Mem6(val at0: Mem5, val at1: Mem5)
data class Mem7(val at0: Mem6, val at1: Mem6)
data class Mem8(val at0: Mem7, val at1: Mem7)
data class Mem9(val at0: Mem8, val at1: Mem8)
data class Mem10(val at0: Mem9, val at1: Mem9)
data class Mem11(val at0: Mem10, val at1: Mem10)
data class Mem12(val at0: Mem11, val at1: Mem11)
data class Mem13(val at0: Mem12, val at1: Mem12)
data class Mem14(val at0: Mem13, val at1: Mem13)
data class Mem15(val at0: Mem14, val at1: Mem14)
data class Mem16(val at0: Mem15, val at1: Mem15)
data class Mem17(val at0: Mem16, val at1: Mem16)
data class Mem18(val at0: Mem17, val at1: Mem17)
data class Mem19(val at0: Mem18, val at1: Mem18)
data class Mem20(val at0: Mem19, val at1: Mem19)
data class Mem21(val at0: Mem20, val at1: Mem20)
data class Mem22(val at0: Mem21, val at1: Mem21)
data class Mem23(val at0: Mem22, val at1: Mem22)
data class Mem24(val at0: Mem23, val at1: Mem23)
data class Mem25(val at0: Mem24, val at1: Mem24)
data class Mem26(val at0: Mem25, val at1: Mem25)
data class Mem27(val at0: Mem26, val at1: Mem26)
data class Mem28(val at0: Mem27, val at1: Mem27)
data class Mem29(val at0: Mem28, val at1: Mem28)
data class Mem30(val at0: Mem29, val at1: Mem29)
data class Mem31(val at0: Mem30, val at1: Mem30)
data class Mem32(val at0: Mem31, val at1: Mem31)

val zeroMem1 = Mem1(0, 0)
val zeroMem2 = Mem2(zeroMem1, zeroMem1)
val zeroMem3 = Mem3(zeroMem2, zeroMem2)
val zeroMem4 = Mem4(zeroMem3, zeroMem3)
val zeroMem5 = Mem5(zeroMem4, zeroMem4)
val zeroMem6 = Mem6(zeroMem5, zeroMem5)
val zeroMem7 = Mem7(zeroMem6, zeroMem6)
val zeroMem8 = Mem8(zeroMem7, zeroMem7)
val zeroMem9 = Mem9(zeroMem8, zeroMem8)
val zeroMem10 = Mem10(zeroMem9, zeroMem9)
val zeroMem11 = Mem11(zeroMem10, zeroMem10)
val zeroMem12 = Mem12(zeroMem11, zeroMem11)
val zeroMem13 = Mem13(zeroMem12, zeroMem12)
val zeroMem14 = Mem14(zeroMem13, zeroMem13)
val zeroMem15 = Mem15(zeroMem14, zeroMem14)
val zeroMem16 = Mem16(zeroMem15, zeroMem15)
val zeroMem17 = Mem17(zeroMem16, zeroMem16)
val zeroMem18 = Mem18(zeroMem17, zeroMem17)
val zeroMem19 = Mem19(zeroMem18, zeroMem18)
val zeroMem20 = Mem20(zeroMem19, zeroMem19)
val zeroMem21 = Mem21(zeroMem20, zeroMem20)
val zeroMem22 = Mem22(zeroMem21, zeroMem21)
val zeroMem23 = Mem23(zeroMem22, zeroMem22)
val zeroMem24 = Mem24(zeroMem23, zeroMem23)
val zeroMem25 = Mem25(zeroMem24, zeroMem24)
val zeroMem26 = Mem26(zeroMem25, zeroMem25)
val zeroMem27 = Mem27(zeroMem26, zeroMem26)
val zeroMem28 = Mem28(zeroMem27, zeroMem27)
val zeroMem29 = Mem29(zeroMem28, zeroMem28)
val zeroMem30 = Mem30(zeroMem29, zeroMem29)
val zeroMem31 = Mem31(zeroMem30, zeroMem30)
val zeroMem32 = Mem32(zeroMem31, zeroMem31)

fun Mem1.at(index: Int) = if (index.and(1) == 0) at0 else at1
fun Mem2.at(index: Int) = if (index.and(1 shl 1) == 0) at0.at(index) else at1.at(index)
fun Mem3.at(index: Int) = if (index.and(1 shl 2) == 0) at0.at(index) else at1.at(index)
fun Mem4.at(index: Int) = if (index.and(1 shl 3) == 0) at0.at(index) else at1.at(index)
fun Mem5.at(index: Int) = if (index.and(1 shl 4) == 0) at0.at(index) else at1.at(index)
fun Mem6.at(index: Int) = if (index.and(1 shl 5) == 0) at0.at(index) else at1.at(index)
fun Mem7.at(index: Int) = if (index.and(1 shl 6) == 0) at0.at(index) else at1.at(index)
fun Mem8.at(index: Int) = if (index.and(1 shl 7) == 0) at0.at(index) else at1.at(index)
fun Mem9.at(index: Int) = if (index.and(1 shl 8) == 0) at0.at(index) else at1.at(index)
fun Mem10.at(index: Int) = if (index.and(1 shl 9) == 0) at0.at(index) else at1.at(index)
fun Mem11.at(index: Int) = if (index.and(1 shl 10) == 0) at0.at(index) else at1.at(index)
fun Mem12.at(index: Int) = if (index.and(1 shl 11) == 0) at0.at(index) else at1.at(index)
fun Mem13.at(index: Int) = if (index.and(1 shl 12) == 0) at0.at(index) else at1.at(index)
fun Mem14.at(index: Int) = if (index.and(1 shl 13) == 0) at0.at(index) else at1.at(index)
fun Mem15.at(index: Int) = if (index.and(1 shl 14) == 0) at0.at(index) else at1.at(index)
fun Mem16.at(index: Int) = if (index.and(1 shl 15) == 0) at0.at(index) else at1.at(index)
fun Mem17.at(index: Int) = if (index.and(1 shl 16) == 0) at0.at(index) else at1.at(index)
fun Mem18.at(index: Int) = if (index.and(1 shl 17) == 0) at0.at(index) else at1.at(index)
fun Mem19.at(index: Int) = if (index.and(1 shl 18) == 0) at0.at(index) else at1.at(index)
fun Mem20.at(index: Int) = if (index.and(1 shl 19) == 0) at0.at(index) else at1.at(index)
fun Mem21.at(index: Int) = if (index.and(1 shl 20) == 0) at0.at(index) else at1.at(index)
fun Mem22.at(index: Int) = if (index.and(1 shl 21) == 0) at0.at(index) else at1.at(index)
fun Mem23.at(index: Int) = if (index.and(1 shl 22) == 0) at0.at(index) else at1.at(index)
fun Mem24.at(index: Int) = if (index.and(1 shl 23) == 0) at0.at(index) else at1.at(index)
fun Mem25.at(index: Int) = if (index.and(1 shl 24) == 0) at0.at(index) else at1.at(index)
fun Mem26.at(index: Int) = if (index.and(1 shl 25) == 0) at0.at(index) else at1.at(index)
fun Mem27.at(index: Int) = if (index.and(1 shl 26) == 0) at0.at(index) else at1.at(index)
fun Mem28.at(index: Int) = if (index.and(1 shl 27) == 0) at0.at(index) else at1.at(index)
fun Mem29.at(index: Int) = if (index.and(1 shl 28) == 0) at0.at(index) else at1.at(index)
fun Mem30.at(index: Int) = if (index.and(1 shl 29) == 0) at0.at(index) else at1.at(index)
fun Mem31.at(index: Int) = if (index.and(1 shl 30) == 0) at0.at(index) else at1.at(index)
fun Mem32.at(index: Int) = if (index.and(1 shl 31) == 0) at0.at(index) else at1.at(index)

fun Mem1.put(index: Int, value: Int) = if (index.and(1) == 0) copy(at0 = value) else copy(at1 = value)
fun Mem2.put(index: Int, value: Int) = if (index.and(1 shl 1) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem3.put(index: Int, value: Int) = if (index.and(1 shl 2) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem4.put(index: Int, value: Int) = if (index.and(1 shl 3) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem5.put(index: Int, value: Int) = if (index.and(1 shl 4) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem6.put(index: Int, value: Int) = if (index.and(1 shl 5) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem7.put(index: Int, value: Int) = if (index.and(1 shl 6) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem8.put(index: Int, value: Int) = if (index.and(1 shl 7) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem9.put(index: Int, value: Int) = if (index.and(1 shl 8) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem10.put(index: Int, value: Int) = if (index.and(1 shl 9) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem11.put(index: Int, value: Int) = if (index.and(1 shl 10) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem12.put(index: Int, value: Int) = if (index.and(1 shl 11) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem13.put(index: Int, value: Int) = if (index.and(1 shl 12) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem14.put(index: Int, value: Int) = if (index.and(1 shl 13) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem15.put(index: Int, value: Int) = if (index.and(1 shl 14) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem16.put(index: Int, value: Int) = if (index.and(1 shl 15) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem17.put(index: Int, value: Int) = if (index.and(1 shl 16) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem18.put(index: Int, value: Int) = if (index.and(1 shl 17) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem19.put(index: Int, value: Int) = if (index.and(1 shl 18) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem20.put(index: Int, value: Int) = if (index.and(1 shl 19) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem21.put(index: Int, value: Int) = if (index.and(1 shl 20) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem22.put(index: Int, value: Int) = if (index.and(1 shl 21) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem23.put(index: Int, value: Int) = if (index.and(1 shl 22) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem24.put(index: Int, value: Int) = if (index.and(1 shl 23) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem25.put(index: Int, value: Int) = if (index.and(1 shl 24) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem26.put(index: Int, value: Int) = if (index.and(1 shl 25) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem27.put(index: Int, value: Int) = if (index.and(1 shl 26) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem28.put(index: Int, value: Int) = if (index.and(1 shl 27) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem29.put(index: Int, value: Int) = if (index.and(1 shl 28) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem30.put(index: Int, value: Int) = if (index.and(1 shl 29) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem31.put(index: Int, value: Int) = if (index.and(1 shl 30) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
fun Mem32.put(index: Int, value: Int) = if (index.and(1 shl 31) == 0) copy(at0 = at0.put(index, value)) else copy(at1 = at1.put(index, value))
