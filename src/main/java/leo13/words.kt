package leo13

val applyWord = word("apply")
val atomWord = word("atom")
val bindWord = word("bind")
val bindingWord = word("binding")
val bindingsWord = word("bindings")
val bitWord = word("bit")
val caseWord = word("case")
val choiceWord = word("choice")
val defineWord = word("define")
val eitherWord = word("either")
val errorWord = word("error")
val evaluatorWord = word("evaluator")
val expectedWord = word("expected")
val expressionWord = word("expression")
val functionWord = word("function")
val givenWord = word("given")
val givesWord = word("gives")
val hasWord = word("has")
val leftWord = word("left")
val lineWord = word("line")
val linkWord = word("link")
val metaWord = word("meta")
val noneWord = word("none")
val ofWord = word("of")
val oneWord = word("one")
val operationWord = word("operation")
val patternWord = word("pattern")
val plusWord = word("plus")
val pointWord = word("point")
val poisonWord = word("poison")
val previousWord = word("previous")
val quoteWord = word("quote")
val rightWord = word("right")
val scriptWord = word("script")
val sentenceWord = word("sentence")
val setWord = word("set")
val switchWord = word("switch")
val todoWord = word("todo")
val unquoteWord = word("unquote")
val unitWord = word("atom")
val valueWord = word("value")
val wordWord = word("value")
val xWord = word("x")
val yWord = word("y")
val zWord = word("z")
val zeroWord = word("zero")
